{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyP6BX4iSuHZJSHfiIb1pb1S"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":41,"metadata":{"id":"mvRj5b4aW0vL","executionInfo":{"status":"ok","timestamp":1713364595822,"user_tz":-120,"elapsed":4,"user":{"displayName":"Paweł Leszczyński","userId":"09579002163402024035"}}},"outputs":[],"source":["import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","from sklearn.model_selection import train_test_split\n","from sklearn.naive_bayes import GaussianNB"]},{"cell_type":"code","source":["df=pd.read_csv('VLagun_Lab_Basins.csv')"],"metadata":{"id":"ABanApX4XcEU","executionInfo":{"status":"ok","timestamp":1713364595822,"user_tz":-120,"elapsed":2,"user":{"displayName":"Paweł Leszczyński","userId":"09579002163402024035"}}},"execution_count":42,"outputs":[]},{"cell_type":"code","source":["df.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":256},"id":"PbZzoJqgXqz2","executionInfo":{"status":"ok","timestamp":1713364596216,"user_tz":-120,"elapsed":396,"user":{"displayName":"Paweł Leszczyński","userId":"09579002163402024035"}},"outputId":"bb8ac386-9f7d-4c4e-a3a7-859983e9b23c"},"execution_count":43,"outputs":[{"output_type":"execute_result","data":{"text/plain":["        PSU    O2  temp.    SS   SRP   DOP     PP   NH4N   NO3N    DON  ...  \\\n","0  3.757624  9.46   18.3  52.0   3.5  11.7  185.0  0.039  0.022  0.551  ...   \n","1  3.504707  9.89   19.1  50.0   4.4  17.5  111.3  0.020  0.025  0.123  ...   \n","2  3.721493  9.63   17.5  62.0  11.7  13.0  117.6  0.036  0.021  0.727  ...   \n","3  4.407982  9.54   18.4  55.0   7.4  16.2  124.7  0.023  0.024  0.566  ...   \n","4  4.389916  9.34   17.8  53.0  13.8  21.4   84.4  0.031  0.030  0.022  ...   \n","\n","     DOC    TPOC  Windspeedinsitu  Depth   DINtoDIP  Cyanobacteria  \\\n","0  7.500  8.5650              3.5    3.3  17.428571           2.35   \n","1  7.860  8.5200              0.0    3.6  10.227273           6.39   \n","2  7.535  8.4706              4.0    3.2   4.871795           2.05   \n","3  7.282  8.7020              3.5    3.0   6.351351           6.30   \n","4  7.370  7.8796              4.0    3.7   4.420290           3.77   \n","\n","   Chlorophyceae  Diatomophyceae  picophytoplankton  Basin  \n","0           3.08           0.230               3.20   East  \n","1           2.87           0.010               2.42   East  \n","2           7.47           0.060               2.61   East  \n","3           5.03           0.110               2.49   East  \n","4           5.69           0.005               1.73   East  \n","\n","[5 rows x 24 columns]"],"text/html":["\n","  <div id=\"df-46fdafde-5a8c-4aa6-9924-4dcb21a25256\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>PSU</th>\n","      <th>O2</th>\n","      <th>temp.</th>\n","      <th>SS</th>\n","      <th>SRP</th>\n","      <th>DOP</th>\n","      <th>PP</th>\n","      <th>NH4N</th>\n","      <th>NO3N</th>\n","      <th>DON</th>\n","      <th>...</th>\n","      <th>DOC</th>\n","      <th>TPOC</th>\n","      <th>Windspeedinsitu</th>\n","      <th>Depth</th>\n","      <th>DINtoDIP</th>\n","      <th>Cyanobacteria</th>\n","      <th>Chlorophyceae</th>\n","      <th>Diatomophyceae</th>\n","      <th>picophytoplankton</th>\n","      <th>Basin</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>3.757624</td>\n","      <td>9.46</td>\n","      <td>18.3</td>\n","      <td>52.0</td>\n","      <td>3.5</td>\n","      <td>11.7</td>\n","      <td>185.0</td>\n","      <td>0.039</td>\n","      <td>0.022</td>\n","      <td>0.551</td>\n","      <td>...</td>\n","      <td>7.500</td>\n","      <td>8.5650</td>\n","      <td>3.5</td>\n","      <td>3.3</td>\n","      <td>17.428571</td>\n","      <td>2.35</td>\n","      <td>3.08</td>\n","      <td>0.230</td>\n","      <td>3.20</td>\n","      <td>East</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>3.504707</td>\n","      <td>9.89</td>\n","      <td>19.1</td>\n","      <td>50.0</td>\n","      <td>4.4</td>\n","      <td>17.5</td>\n","      <td>111.3</td>\n","      <td>0.020</td>\n","      <td>0.025</td>\n","      <td>0.123</td>\n","      <td>...</td>\n","      <td>7.860</td>\n","      <td>8.5200</td>\n","      <td>0.0</td>\n","      <td>3.6</td>\n","      <td>10.227273</td>\n","      <td>6.39</td>\n","      <td>2.87</td>\n","      <td>0.010</td>\n","      <td>2.42</td>\n","      <td>East</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3.721493</td>\n","      <td>9.63</td>\n","      <td>17.5</td>\n","      <td>62.0</td>\n","      <td>11.7</td>\n","      <td>13.0</td>\n","      <td>117.6</td>\n","      <td>0.036</td>\n","      <td>0.021</td>\n","      <td>0.727</td>\n","      <td>...</td>\n","      <td>7.535</td>\n","      <td>8.4706</td>\n","      <td>4.0</td>\n","      <td>3.2</td>\n","      <td>4.871795</td>\n","      <td>2.05</td>\n","      <td>7.47</td>\n","      <td>0.060</td>\n","      <td>2.61</td>\n","      <td>East</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4.407982</td>\n","      <td>9.54</td>\n","      <td>18.4</td>\n","      <td>55.0</td>\n","      <td>7.4</td>\n","      <td>16.2</td>\n","      <td>124.7</td>\n","      <td>0.023</td>\n","      <td>0.024</td>\n","      <td>0.566</td>\n","      <td>...</td>\n","      <td>7.282</td>\n","      <td>8.7020</td>\n","      <td>3.5</td>\n","      <td>3.0</td>\n","      <td>6.351351</td>\n","      <td>6.30</td>\n","      <td>5.03</td>\n","      <td>0.110</td>\n","      <td>2.49</td>\n","      <td>East</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>4.389916</td>\n","      <td>9.34</td>\n","      <td>17.8</td>\n","      <td>53.0</td>\n","      <td>13.8</td>\n","      <td>21.4</td>\n","      <td>84.4</td>\n","      <td>0.031</td>\n","      <td>0.030</td>\n","      <td>0.022</td>\n","      <td>...</td>\n","      <td>7.370</td>\n","      <td>7.8796</td>\n","      <td>4.0</td>\n","      <td>3.7</td>\n","      <td>4.420290</td>\n","      <td>3.77</td>\n","      <td>5.69</td>\n","      <td>0.005</td>\n","      <td>1.73</td>\n","      <td>East</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 24 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-46fdafde-5a8c-4aa6-9924-4dcb21a25256')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-46fdafde-5a8c-4aa6-9924-4dcb21a25256 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-46fdafde-5a8c-4aa6-9924-4dcb21a25256');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-fb31147b-1eb0-4d32-8632-e1f8b4803011\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-fb31147b-1eb0-4d32-8632-e1f8b4803011')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-fb31147b-1eb0-4d32-8632-e1f8b4803011 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df"}},"metadata":{},"execution_count":43}]},{"cell_type":"code","source":["decClass=df.columns[df.shape[1]-1]\n","print(decClass)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"PeWZ1YpZXsCK","executionInfo":{"status":"ok","timestamp":1713364596216,"user_tz":-120,"elapsed":10,"user":{"displayName":"Paweł Leszczyński","userId":"09579002163402024035"}},"outputId":"f2ffe89a-a3f2-4b9d-c1c5-eee8f60d022d"},"execution_count":44,"outputs":[{"output_type":"stream","name":"stdout","text":["Basin\n"]}]},{"cell_type":"code","source":["df.groupby(decClass).size()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"PD52ypWYYIus","executionInfo":{"status":"ok","timestamp":1713364596216,"user_tz":-120,"elapsed":8,"user":{"displayName":"Paweł Leszczyński","userId":"09579002163402024035"}},"outputId":"483a31d2-b3b9-4943-9f7b-8b8feb2939c6"},"execution_count":45,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Basin\n","East    90\n","West    65\n","dtype: int64"]},"metadata":{},"execution_count":45}]},{"cell_type":"code","source":["East= df[df.Basin=='East']\n","West= df[df.Basin=='West']"],"metadata":{"id":"lO5hsxxIYkAT","executionInfo":{"status":"ok","timestamp":1713364596217,"user_tz":-120,"elapsed":8,"user":{"displayName":"Paweł Leszczyński","userId":"09579002163402024035"}}},"execution_count":46,"outputs":[]},{"cell_type":"code","source":["plt.title('East vs West basin')\n","plt.xlabel('Windspeedinsitu')\n","plt.ylabel('DOC')\n","plt.scatter(East.Windspeedinsitu, East.DOC, color='red', label='East', alpha=0.3)\n","plt.scatter(West.Windspeedinsitu, West.DOC, color='blue', label='West', alpha=0.3)\n","plt.legend()\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":472},"id":"EG2y2gJjYzmr","executionInfo":{"status":"ok","timestamp":1713364596608,"user_tz":-120,"elapsed":398,"user":{"displayName":"Paweł Leszczyński","userId":"09579002163402024035"}},"outputId":"dd61c544-b75d-4470-f662-6d2ce2ddc212"},"execution_count":47,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["df.Basin=[1 if i == 'East' else 0 for i in df.Basin]"],"metadata":{"id":"5D2LM39FZfLl","executionInfo":{"status":"ok","timestamp":1713364596609,"user_tz":-120,"elapsed":8,"user":{"displayName":"Paweł Leszczyński","userId":"09579002163402024035"}}},"execution_count":48,"outputs":[]},{"cell_type":"code","source":["df.Basin"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vls38QRbbBAV","executionInfo":{"status":"ok","timestamp":1713364596609,"user_tz":-120,"elapsed":7,"user":{"displayName":"Paweł Leszczyński","userId":"09579002163402024035"}},"outputId":"4f1fe950-73b3-471c-a185-463ebd92475f"},"execution_count":49,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0      1\n","1      1\n","2      1\n","3      1\n","4      1\n","      ..\n","150    0\n","151    0\n","152    0\n","153    0\n","154    0\n","Name: Basin, Length: 155, dtype: int64"]},"metadata":{},"execution_count":49}]},{"cell_type":"code","source":["x= df.drop(['Basin'], axis=1)\n","y=df.Basin.values"],"metadata":{"id":"dZZb4Y--a9_t","executionInfo":{"status":"ok","timestamp":1713364596895,"user_tz":-120,"elapsed":291,"user":{"displayName":"Paweł Leszczyński","userId":"09579002163402024035"}}},"execution_count":50,"outputs":[]},{"cell_type":"code","source":["x=(x-np.min(x)) / (np.max(x) - np.min(x))"],"metadata":{"id":"cYhFa6KRbO71","executionInfo":{"status":"ok","timestamp":1713364596896,"user_tz":-120,"elapsed":13,"user":{"displayName":"Paweł Leszczyński","userId":"09579002163402024035"}}},"execution_count":51,"outputs":[]},{"cell_type":"code","source":["x_train, x_test, y_train, y_test= train_test_split(x,y, test_size=0.3, random_state=42)"],"metadata":{"id":"RS2IOTIqbZwu","executionInfo":{"status":"ok","timestamp":1713364596897,"user_tz":-120,"elapsed":13,"user":{"displayName":"Paweł Leszczyński","userId":"09579002163402024035"}}},"execution_count":52,"outputs":[]},{"cell_type":"code","source":["nb= GaussianNB()\n","nb.fit(x_train, y_train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":75},"id":"eysyjCnIbr-s","executionInfo":{"status":"ok","timestamp":1713364596897,"user_tz":-120,"elapsed":12,"user":{"displayName":"Paweł Leszczyński","userId":"09579002163402024035"}},"outputId":"8224cbcc-a56a-44b9-ddee-1873e9c52e54"},"execution_count":53,"outputs":[{"output_type":"execute_result","data":{"text/plain":["GaussianNB()"],"text/html":["<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GaussianNB()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">GaussianNB</label><div class=\"sk-toggleable__content\"><pre>GaussianNB()</pre></div></div></div></div></div>"]},"metadata":{},"execution_count":53}]},{"cell_type":"code","source":["print('Naive Bayes score: ', nb.score(x_test,y_test))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6-QmyIGBb8n5","executionInfo":{"status":"ok","timestamp":1713364596897,"user_tz":-120,"elapsed":11,"user":{"displayName":"Paweł Leszczyński","userId":"09579002163402024035"}},"outputId":"7b97cfcf-b67b-41e6-b968-df36aa2e9dd2"},"execution_count":54,"outputs":[{"output_type":"stream","name":"stdout","text":["Naive Bayes score:  0.574468085106383\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"jf7GSryNb7L9","executionInfo":{"status":"ok","timestamp":1713364596897,"user_tz":-120,"elapsed":9,"user":{"displayName":"Paweł Leszczyński","userId":"09579002163402024035"}}},"execution_count":54,"outputs":[]}]}