{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1ABKD3eaPYpTGuxFXnSeoOJPOmsQxAVA8","timestamp":1712065705229}],"authorship_tag":"ABX9TyNCH+jtxnOEJwYbDkRdb+f9"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":2,"metadata":{"id":"WVhDfT0t8L5W","executionInfo":{"status":"ok","timestamp":1712065753082,"user_tz":-120,"elapsed":5508,"user":{"displayName":"Paweł Leszczyński","userId":"09579002163402024035"}}},"outputs":[],"source":["import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","\n","\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import StandardScaler\n","from sklearn.discriminant_analysis import LinearDiscriminantAnalysis\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.metrics import confusion_matrix\n","from sklearn.metrics import accuracy_score\n","from matplotlib.colors import ListedColormap"]},{"cell_type":"code","source":["df=pd.read_csv('ToxinsbaseClass.csv')\n","\n","print(df.shape)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"JnBDemU_8hVZ","executionInfo":{"status":"ok","timestamp":1712065753083,"user_tz":-120,"elapsed":7,"user":{"displayName":"Paweł Leszczyński","userId":"09579002163402024035"}},"outputId":"f764d800-7bf9-43c4-8ee4-ce0f8780322a"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["(137, 23)\n"]}]},{"cell_type":"code","source":["df.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":290},"id":"LjFGm55c8ovS","executionInfo":{"status":"ok","timestamp":1712065753638,"user_tz":-120,"elapsed":561,"user":{"displayName":"Paweł Leszczyński","userId":"09579002163402024035"}},"outputId":"c5b65fd4-73bc-4c7c-955c-5e949a07f968"},"execution_count":4,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   Latitude   Longitude   MaximumDepth   SecchiDepth   Sampling Depth   \\\n","0  46.673750    6.322253           18.0          1.05             10.5   \n","1  46.514161    6.773583           13.0          1.60              9.0   \n","2  46.354617    6.152489            3.5          3.50              3.0   \n","3  47.287447    8.211500           48.0          1.75             12.0   \n","4  46.638953    6.286464           32.0          4.00             11.0   \n","\n","   T_Surf   T_Epi   Zeu / Zmix  BuoyFreq   TP   ...  MC_dmRR   MC_RR   \\\n","0     22.5    21.1        0.21      0.01  0.02  ...     0.000     0.0   \n","1     20.4    19.3        0.50      0.01  0.09  ...     0.000     0.0   \n","2     26.0    25.9        2.00      0.00  0.12  ...     0.000     0.0   \n","3     23.9    19.4        0.52      0.01  0.02  ...     0.302     0.0   \n","4     21.5    19.7        0.91      0.01  0.07  ...     0.090     0.0   \n","\n","   MC_dmLR   MC_LR   CYN   ATX   ToxinRichness   TDI    TTC  Toxicity  \n","0     0.001   0.000   0.0   0.0              2  0.42  0.001         1  \n","1     0.003   0.004   0.0   0.0              3  1.05  0.009         1  \n","2     0.002   0.019   0.0   0.0              3  0.39  0.021         1  \n","3     0.290   0.005   0.0   0.0              4  1.00  0.668         2  \n","4     0.056   0.003   0.0   0.0              4  1.07  0.177         2  \n","\n","[5 rows x 23 columns]"],"text/html":["\n","  <div id=\"df-c54920b4-8d05-4c1c-81b3-cc5ab68fdbc3\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Latitude</th>\n","      <th>Longitude</th>\n","      <th>MaximumDepth</th>\n","      <th>SecchiDepth</th>\n","      <th>Sampling Depth</th>\n","      <th>T_Surf</th>\n","      <th>T_Epi</th>\n","      <th>Zeu / Zmix</th>\n","      <th>BuoyFreq</th>\n","      <th>TP</th>\n","      <th>...</th>\n","      <th>MC_dmRR</th>\n","      <th>MC_RR</th>\n","      <th>MC_dmLR</th>\n","      <th>MC_LR</th>\n","      <th>CYN</th>\n","      <th>ATX</th>\n","      <th>ToxinRichness</th>\n","      <th>TDI</th>\n","      <th>TTC</th>\n","      <th>Toxicity</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>46.673750</td>\n","      <td>6.322253</td>\n","      <td>18.0</td>\n","      <td>1.05</td>\n","      <td>10.5</td>\n","      <td>22.5</td>\n","      <td>21.1</td>\n","      <td>0.21</td>\n","      <td>0.01</td>\n","      <td>0.02</td>\n","      <td>...</td>\n","      <td>0.000</td>\n","      <td>0.0</td>\n","      <td>0.001</td>\n","      <td>0.000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>2</td>\n","      <td>0.42</td>\n","      <td>0.001</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>46.514161</td>\n","      <td>6.773583</td>\n","      <td>13.0</td>\n","      <td>1.60</td>\n","      <td>9.0</td>\n","      <td>20.4</td>\n","      <td>19.3</td>\n","      <td>0.50</td>\n","      <td>0.01</td>\n","      <td>0.09</td>\n","      <td>...</td>\n","      <td>0.000</td>\n","      <td>0.0</td>\n","      <td>0.003</td>\n","      <td>0.004</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>3</td>\n","      <td>1.05</td>\n","      <td>0.009</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>46.354617</td>\n","      <td>6.152489</td>\n","      <td>3.5</td>\n","      <td>3.50</td>\n","      <td>3.0</td>\n","      <td>26.0</td>\n","      <td>25.9</td>\n","      <td>2.00</td>\n","      <td>0.00</td>\n","      <td>0.12</td>\n","      <td>...</td>\n","      <td>0.000</td>\n","      <td>0.0</td>\n","      <td>0.002</td>\n","      <td>0.019</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>3</td>\n","      <td>0.39</td>\n","      <td>0.021</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>47.287447</td>\n","      <td>8.211500</td>\n","      <td>48.0</td>\n","      <td>1.75</td>\n","      <td>12.0</td>\n","      <td>23.9</td>\n","      <td>19.4</td>\n","      <td>0.52</td>\n","      <td>0.01</td>\n","      <td>0.02</td>\n","      <td>...</td>\n","      <td>0.302</td>\n","      <td>0.0</td>\n","      <td>0.290</td>\n","      <td>0.005</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>4</td>\n","      <td>1.00</td>\n","      <td>0.668</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>46.638953</td>\n","      <td>6.286464</td>\n","      <td>32.0</td>\n","      <td>4.00</td>\n","      <td>11.0</td>\n","      <td>21.5</td>\n","      <td>19.7</td>\n","      <td>0.91</td>\n","      <td>0.01</td>\n","      <td>0.07</td>\n","      <td>...</td>\n","      <td>0.090</td>\n","      <td>0.0</td>\n","      <td>0.056</td>\n","      <td>0.003</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>4</td>\n","      <td>1.07</td>\n","      <td>0.177</td>\n","      <td>2</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 23 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c54920b4-8d05-4c1c-81b3-cc5ab68fdbc3')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-c54920b4-8d05-4c1c-81b3-cc5ab68fdbc3 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-c54920b4-8d05-4c1c-81b3-cc5ab68fdbc3');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-f9c8ab88-7b93-40af-982d-3b9026f8cd2a\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f9c8ab88-7b93-40af-982d-3b9026f8cd2a')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-f9c8ab88-7b93-40af-982d-3b9026f8cd2a button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df"}},"metadata":{},"execution_count":4}]},{"cell_type":"code","source":["df.describe()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":367},"id":"UKaiUQ6E8sKA","executionInfo":{"status":"ok","timestamp":1712065753639,"user_tz":-120,"elapsed":6,"user":{"displayName":"Paweł Leszczyński","userId":"09579002163402024035"}},"outputId":"f5102e99-1bf2-4244-8221-6e57489b59ed"},"execution_count":5,"outputs":[{"output_type":"execute_result","data":{"text/plain":["        Latitude   Longitude   MaximumDepth   SecchiDepth   Sampling Depth   \\\n","count  137.000000  137.000000     137.000000    137.000000       137.000000   \n","mean    51.104677   14.813468      17.987591      1.486715         6.429927   \n","std      6.051893   10.720521      27.797015      1.258167         4.819238   \n","min     36.755550  -25.788917       1.000000      0.160000         0.700000   \n","25%     47.350792   10.983188       4.500000      0.650000         3.000000   \n","50%     52.413611   16.698806       9.000000      1.050000         5.000000   \n","75%     54.591528   21.592222      23.000000      1.800000         9.000000   \n","max     62.239189   32.832500     251.000000      6.200000        30.000000   \n","\n","          T_Surf       T_Epi   Zeu / Zmix    BuoyFreq         TP   ...  \\\n","count  137.000000  137.000000  137.000000  137.000000  137.000000  ...   \n","mean    22.183212   20.775912    0.987226    0.005693    0.088102  ...   \n","std      3.102930    3.143774    1.117894    0.006159    0.109649  ...   \n","min      9.000000    8.700000    0.040000    0.000000    0.010000  ...   \n","25%     20.300000   18.900000    0.350000    0.000000    0.030000  ...   \n","50%     22.000000   20.400000    0.550000    0.010000    0.060000  ...   \n","75%     23.900000   22.300000    1.230000    0.010000    0.090000  ...   \n","max     31.400000   31.200000    8.800000    0.030000    0.870000  ...   \n","\n","         MC_dmRR       MC_RR     MC_dmLR       MC_LR         CYN         ATX   \\\n","count  137.000000  137.000000  137.000000  137.000000  137.000000  137.000000   \n","mean     0.558226    0.205036    0.156095    0.199876    0.048482    0.028036   \n","std      1.903642    0.507328    0.513956    0.574369    0.209486    0.124335   \n","min      0.000000    0.000000    0.000000    0.000000    0.000000    0.000000   \n","25%      0.000000    0.000000    0.002000    0.000000    0.000000    0.000000   \n","50%      0.000000    0.000000    0.007000    0.017000    0.000000    0.000000   \n","75%      0.086000    0.119000    0.047000    0.098000    0.004000    0.004000   \n","max     14.892000    3.309000    3.166000    3.968000    2.007000    1.333000   \n","\n","       ToxinRichness         TDI         TTC    Toxicity  \n","count     137.000000  137.000000  137.000000  137.000000  \n","mean        3.941606    0.780657    1.350766    1.832117  \n","std         1.625922    0.394969    2.849080    0.800453  \n","min         1.000000    0.000000    0.000000    1.000000  \n","25%         3.000000    0.530000    0.033000    1.000000  \n","50%         4.000000    0.880000    0.189000    2.000000  \n","75%         5.000000    1.060000    0.901000    2.000000  \n","max         7.000000    1.440000   17.189000    3.000000  \n","\n","[8 rows x 23 columns]"],"text/html":["\n","  <div id=\"df-66e320fc-c4eb-4fb9-9af4-e4b8fb278c54\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Latitude</th>\n","      <th>Longitude</th>\n","      <th>MaximumDepth</th>\n","      <th>SecchiDepth</th>\n","      <th>Sampling Depth</th>\n","      <th>T_Surf</th>\n","      <th>T_Epi</th>\n","      <th>Zeu / Zmix</th>\n","      <th>BuoyFreq</th>\n","      <th>TP</th>\n","      <th>...</th>\n","      <th>MC_dmRR</th>\n","      <th>MC_RR</th>\n","      <th>MC_dmLR</th>\n","      <th>MC_LR</th>\n","      <th>CYN</th>\n","      <th>ATX</th>\n","      <th>ToxinRichness</th>\n","      <th>TDI</th>\n","      <th>TTC</th>\n","      <th>Toxicity</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>137.000000</td>\n","      <td>137.000000</td>\n","      <td>137.000000</td>\n","      <td>137.000000</td>\n","      <td>137.000000</td>\n","      <td>137.000000</td>\n","      <td>137.000000</td>\n","      <td>137.000000</td>\n","      <td>137.000000</td>\n","      <td>137.000000</td>\n","      <td>...</td>\n","      <td>137.000000</td>\n","      <td>137.000000</td>\n","      <td>137.000000</td>\n","      <td>137.000000</td>\n","      <td>137.000000</td>\n","      <td>137.000000</td>\n","      <td>137.000000</td>\n","      <td>137.000000</td>\n","      <td>137.000000</td>\n","      <td>137.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>51.104677</td>\n","      <td>14.813468</td>\n","      <td>17.987591</td>\n","      <td>1.486715</td>\n","      <td>6.429927</td>\n","      <td>22.183212</td>\n","      <td>20.775912</td>\n","      <td>0.987226</td>\n","      <td>0.005693</td>\n","      <td>0.088102</td>\n","      <td>...</td>\n","      <td>0.558226</td>\n","      <td>0.205036</td>\n","      <td>0.156095</td>\n","      <td>0.199876</td>\n","      <td>0.048482</td>\n","      <td>0.028036</td>\n","      <td>3.941606</td>\n","      <td>0.780657</td>\n","      <td>1.350766</td>\n","      <td>1.832117</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>6.051893</td>\n","      <td>10.720521</td>\n","      <td>27.797015</td>\n","      <td>1.258167</td>\n","      <td>4.819238</td>\n","      <td>3.102930</td>\n","      <td>3.143774</td>\n","      <td>1.117894</td>\n","      <td>0.006159</td>\n","      <td>0.109649</td>\n","      <td>...</td>\n","      <td>1.903642</td>\n","      <td>0.507328</td>\n","      <td>0.513956</td>\n","      <td>0.574369</td>\n","      <td>0.209486</td>\n","      <td>0.124335</td>\n","      <td>1.625922</td>\n","      <td>0.394969</td>\n","      <td>2.849080</td>\n","      <td>0.800453</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>36.755550</td>\n","      <td>-25.788917</td>\n","      <td>1.000000</td>\n","      <td>0.160000</td>\n","      <td>0.700000</td>\n","      <td>9.000000</td>\n","      <td>8.700000</td>\n","      <td>0.040000</td>\n","      <td>0.000000</td>\n","      <td>0.010000</td>\n","      <td>...</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>1.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>1.000000</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>47.350792</td>\n","      <td>10.983188</td>\n","      <td>4.500000</td>\n","      <td>0.650000</td>\n","      <td>3.000000</td>\n","      <td>20.300000</td>\n","      <td>18.900000</td>\n","      <td>0.350000</td>\n","      <td>0.000000</td>\n","      <td>0.030000</td>\n","      <td>...</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.002000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>3.000000</td>\n","      <td>0.530000</td>\n","      <td>0.033000</td>\n","      <td>1.000000</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>52.413611</td>\n","      <td>16.698806</td>\n","      <td>9.000000</td>\n","      <td>1.050000</td>\n","      <td>5.000000</td>\n","      <td>22.000000</td>\n","      <td>20.400000</td>\n","      <td>0.550000</td>\n","      <td>0.010000</td>\n","      <td>0.060000</td>\n","      <td>...</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.007000</td>\n","      <td>0.017000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>4.000000</td>\n","      <td>0.880000</td>\n","      <td>0.189000</td>\n","      <td>2.000000</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>54.591528</td>\n","      <td>21.592222</td>\n","      <td>23.000000</td>\n","      <td>1.800000</td>\n","      <td>9.000000</td>\n","      <td>23.900000</td>\n","      <td>22.300000</td>\n","      <td>1.230000</td>\n","      <td>0.010000</td>\n","      <td>0.090000</td>\n","      <td>...</td>\n","      <td>0.086000</td>\n","      <td>0.119000</td>\n","      <td>0.047000</td>\n","      <td>0.098000</td>\n","      <td>0.004000</td>\n","      <td>0.004000</td>\n","      <td>5.000000</td>\n","      <td>1.060000</td>\n","      <td>0.901000</td>\n","      <td>2.000000</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>62.239189</td>\n","      <td>32.832500</td>\n","      <td>251.000000</td>\n","      <td>6.200000</td>\n","      <td>30.000000</td>\n","      <td>31.400000</td>\n","      <td>31.200000</td>\n","      <td>8.800000</td>\n","      <td>0.030000</td>\n","      <td>0.870000</td>\n","      <td>...</td>\n","      <td>14.892000</td>\n","      <td>3.309000</td>\n","      <td>3.166000</td>\n","      <td>3.968000</td>\n","      <td>2.007000</td>\n","      <td>1.333000</td>\n","      <td>7.000000</td>\n","      <td>1.440000</td>\n","      <td>17.189000</td>\n","      <td>3.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>8 rows × 23 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-66e320fc-c4eb-4fb9-9af4-e4b8fb278c54')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-66e320fc-c4eb-4fb9-9af4-e4b8fb278c54 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-66e320fc-c4eb-4fb9-9af4-e4b8fb278c54');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-81147de3-e934-413c-9a6b-63d75b546af8\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-81147de3-e934-413c-9a6b-63d75b546af8')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-81147de3-e934-413c-9a6b-63d75b546af8 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe"}},"metadata":{},"execution_count":5}]},{"cell_type":"code","source":["x=df.iloc[:,0:df.shape[1]-1]\n","y=df.iloc[:,df.shape[1]-1]"],"metadata":{"id":"s91WN1CV8tYL","executionInfo":{"status":"ok","timestamp":1712065753639,"user_tz":-120,"elapsed":5,"user":{"displayName":"Paweł Leszczyński","userId":"09579002163402024035"}}},"execution_count":6,"outputs":[]},{"cell_type":"code","source":["x_train,x_test, y_train, y_test= train_test_split(x, y, test_size=0.3, random_state=0)"],"metadata":{"id":"-cyh0DK69338","executionInfo":{"status":"ok","timestamp":1712065753639,"user_tz":-120,"elapsed":4,"user":{"displayName":"Paweł Leszczyński","userId":"09579002163402024035"}}},"execution_count":7,"outputs":[]},{"cell_type":"code","source":["sc_x=StandardScaler()\n","x_train=sc_x.fit_transform(x_train)\n","x_test=sc_x.fit_transform(x_test)"],"metadata":{"id":"8QniE-pi9on-","executionInfo":{"status":"ok","timestamp":1712065753639,"user_tz":-120,"elapsed":4,"user":{"displayName":"Paweł Leszczyński","userId":"09579002163402024035"}}},"execution_count":8,"outputs":[]},{"cell_type":"code","source":["lda=LinearDiscriminantAnalysis(n_components=2)\n"],"metadata":{"id":"BxTegKYD-k0E","executionInfo":{"status":"ok","timestamp":1712065753639,"user_tz":-120,"elapsed":4,"user":{"displayName":"Paweł Leszczyński","userId":"09579002163402024035"}}},"execution_count":9,"outputs":[]},{"cell_type":"code","source":["x_train=lda.fit(x_train, y_train).transform(x_train)\n","x_test=lda.fit(x_test, y_test).transform(x_test)"],"metadata":{"id":"omTyaEcc-gkg","executionInfo":{"status":"ok","timestamp":1712065753639,"user_tz":-120,"elapsed":4,"user":{"displayName":"Paweł Leszczyński","userId":"09579002163402024035"}}},"execution_count":10,"outputs":[]},{"cell_type":"code","source":["explainded_variance= lda.explained_variance_ratio_\n","explainded_variance"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"D61lINz7_AEd","executionInfo":{"status":"ok","timestamp":1712065753886,"user_tz":-120,"elapsed":251,"user":{"displayName":"Paweł Leszczyński","userId":"09579002163402024035"}},"outputId":"6285124f-7526-4ae7-8e28-464572059f06"},"execution_count":11,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([0.92699784, 0.07300216])"]},"metadata":{},"execution_count":11}]},{"cell_type":"code","source":["classifier=LogisticRegression(random_state=0)\n","classifier.fit(x_train, y_train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":74},"id":"OIzDBdxb_HPF","executionInfo":{"status":"ok","timestamp":1712065754262,"user_tz":-120,"elapsed":378,"user":{"displayName":"Paweł Leszczyński","userId":"09579002163402024035"}},"outputId":"b287e76a-14f7-4ad7-afda-6c57db02b72a"},"execution_count":12,"outputs":[{"output_type":"execute_result","data":{"text/plain":["LogisticRegression(random_state=0)"],"text/html":["<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression(random_state=0)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LogisticRegression</label><div class=\"sk-toggleable__content\"><pre>LogisticRegression(random_state=0)</pre></div></div></div></div></div>"]},"metadata":{},"execution_count":12}]},{"cell_type":"code","source":["y_pred= classifier.predict(x_test)\n","y_pred"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"bKenYMfZ_WrQ","executionInfo":{"status":"ok","timestamp":1712065754263,"user_tz":-120,"elapsed":9,"user":{"displayName":"Paweł Leszczyński","userId":"09579002163402024035"}},"outputId":"bd3ca4b8-743a-446f-c5ea-071b3890635c"},"execution_count":13,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([1, 1, 1, 1, 3, 1, 1, 1, 3, 2, 3, 1, 1, 2, 3, 1, 1, 2, 3, 2, 3, 1,\n","       3, 2, 2, 2, 2, 1, 1, 2, 1, 3, 2, 1, 1, 1, 1, 1, 1, 3, 3, 1])"]},"metadata":{},"execution_count":13}]},{"cell_type":"code","source":["conf_matrix= confusion_matrix(y_test, y_pred)\n","conf_matrix"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mDtqn9mp_pvF","executionInfo":{"status":"ok","timestamp":1712065754541,"user_tz":-120,"elapsed":4,"user":{"displayName":"Paweł Leszczyński","userId":"09579002163402024035"}},"outputId":"a6d2e0cf-8991-46c5-fb88-60d906438c56"},"execution_count":14,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[16,  3,  1],\n","       [ 6,  7,  0],\n","       [ 0,  0,  9]])"]},"metadata":{},"execution_count":14}]},{"cell_type":"code","source":["accuracy= accuracy_score(y_test,y_pred)\n","accuracy"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"WRcPpw1R_zLG","executionInfo":{"status":"ok","timestamp":1712065754541,"user_tz":-120,"elapsed":3,"user":{"displayName":"Paweł Leszczyński","userId":"09579002163402024035"}},"outputId":"82088ddd-0578-454b-a64d-bf083c873303"},"execution_count":15,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.7619047619047619"]},"metadata":{},"execution_count":15}]},{"cell_type":"code","source":["y_pred= classifier.predict(x_train)\n","y_pred"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wGRu-ZyuACmo","executionInfo":{"status":"ok","timestamp":1712065754541,"user_tz":-120,"elapsed":2,"user":{"displayName":"Paweł Leszczyński","userId":"09579002163402024035"}},"outputId":"a19861d7-15de-4ee3-c132-f338be20c39e"},"execution_count":16,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([3, 3, 3, 1, 1, 2, 1, 3, 1, 2, 1, 1, 3, 1, 1, 1, 1, 3, 2, 2, 2, 1,\n","       3, 3, 2, 2, 1, 3, 1, 2, 1, 1, 2, 2, 1, 1, 3, 1, 1, 1, 1, 1, 2, 2,\n","       2, 2, 3, 1, 1, 3, 3, 3, 2, 3, 2, 2, 2, 2, 1, 2, 1, 1, 1, 2, 3, 3,\n","       3, 1, 1, 1, 2, 3, 2, 2, 2, 2, 2, 2, 1, 3, 3, 3, 3, 1, 2, 2, 2, 2,\n","       1, 2, 3, 1, 3, 2, 1])"]},"metadata":{},"execution_count":16}]},{"cell_type":"code","source":["conf_matrix= confusion_matrix(y_train, y_pred)\n","conf_matrix"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"NWgU16WlAWyI","executionInfo":{"status":"ok","timestamp":1712065754860,"user_tz":-120,"elapsed":11,"user":{"displayName":"Paweł Leszczyński","userId":"09579002163402024035"}},"outputId":"94862d22-b8ed-46dd-b97b-a0218fe4714f"},"execution_count":17,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[33,  4,  0],\n","       [ 3, 30,  0],\n","       [ 0,  0, 25]])"]},"metadata":{},"execution_count":17}]},{"cell_type":"code","source":["accuracy= accuracy_score(y_train,y_pred)\n","accuracy"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-W5NB8ozANTh","executionInfo":{"status":"ok","timestamp":1712065754860,"user_tz":-120,"elapsed":10,"user":{"displayName":"Paweł Leszczyński","userId":"09579002163402024035"}},"outputId":"445e2da7-b65e-4cbc-d326-ebeabcb766fb"},"execution_count":18,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.9263157894736842"]},"metadata":{},"execution_count":18}]},{"cell_type":"code","source":["x_set, y_set= x_test, y_test\n","x1,x2= np.meshgrid(np.arange(start=x_set[:,0].min()-1, stop=x_set[:,0].max()+1, step=0.01),\n","                   np.arange(start=x_set[:,1].min()-1, stop=x_set[:,1].max()+1, step=0.01))\n","plt.contourf(x1,x2, classifier.predict(np.array([x1.ravel(), x2.ravel()]).T).reshape(x1.shape),\n","             alpha=0.75, cmap=ListedColormap(('red', 'green', 'blue')))\n","plt.xlim(x1.min(), x1.max())\n","plt.xlim(x2.min(), x2.max())\n","for i,j in enumerate(np.unique(y_set)):\n","  plt.scatter(x_set[y_set==j,0], x_set[y_set==j, 1],\n","              c=ListedColormap(('orange', 'green', 'blue'))(i), label=j)\n","\n","plt.title('Logistic Regression (test set)')\n","plt.xlabel('LDA1')\n","plt.ylabel('LDA2')\n","plt.legend()\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":527},"id":"FqVB1QgGAjXD","executionInfo":{"status":"ok","timestamp":1712065757702,"user_tz":-120,"elapsed":2848,"user":{"displayName":"Paweł Leszczyński","userId":"09579002163402024035"}},"outputId":"19ca7ddd-cece-4e41-ce5a-c7431a9183fa"},"execution_count":19,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-19-20a29ef53156>:9: UserWarning: *c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n","  plt.scatter(x_set[y_set==j,0], x_set[y_set==j, 1],\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["x_set, y_set= x_train, y_train\n","x1,x2= np.meshgrid(np.arange(start=x_set[:,0].min()-1, stop=x_set[:,0].max()+1, step=0.01),\n","                   np.arange(start=x_set[:,1].min()-1, stop=x_set[:,1].max()+1, step=0.01))\n","plt.contourf(x1,x2, classifier.predict(np.array([x1.ravel(), x2.ravel()]).T).reshape(x1.shape),\n","             alpha=0.75, cmap=ListedColormap(('red', 'green', 'blue')))\n","plt.xlim(x1.min(), x1.max())\n","plt.xlim(x2.min(), x2.max())\n","for i,j in enumerate(np.unique(y_set)):\n","  plt.scatter(x_set[y_set==j,0], x_set[y_set==j, 1],\n","              c=ListedColormap(('orange', 'green', 'blue'))(i), label=j)\n","\n","plt.title('Logistic Regression (train set)')\n","plt.xlabel('LDA1')\n","plt.ylabel('LDA2')\n","plt.legend()\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":527},"id":"wimXIlyJB5Jy","executionInfo":{"status":"ok","timestamp":1712065760349,"user_tz":-120,"elapsed":2652,"user":{"displayName":"Paweł Leszczyński","userId":"09579002163402024035"}},"outputId":"afebd53c-f53b-405e-fc70-002114a82c96"},"execution_count":20,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-20-3bd099042178>:9: UserWarning: *c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n","  plt.scatter(x_set[y_set==j,0], x_set[y_set==j, 1],\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]}]}