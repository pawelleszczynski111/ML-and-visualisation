{"cells":[{"cell_type":"code","execution_count":34,"metadata":{"executionInfo":{"elapsed":2,"status":"ok","timestamp":1710847638459,"user":{"displayName":"Paweł Leszczyński","userId":"09579002163402024035"},"user_tz":-60},"id":"oyPz_LDeaoYQ"},"outputs":[],"source":["import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","from matplotlib.colors import ListedColormap\n","\n","\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import StandardScaler\n","from sklearn.decomposition import PCA\n","\n","from sklearn.linear_model import LogisticRegression\n","\n","from sklearn.metrics import confusion_matrix\n","from sklearn.metrics import accuracy_score"]},{"cell_type":"code","execution_count":3,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":5,"status":"ok","timestamp":1710846876749,"user":{"displayName":"Paweł Leszczyński","userId":"09579002163402024035"},"user_tz":-60},"id":"ZIeOmpdpavqw","outputId":"bf5a21de-f2a2-4622-d0e9-8c84c2f133ad"},"outputs":[{"data":{"text/plain":["(178, 14)"]},"execution_count":3,"metadata":{},"output_type":"execute_result"}],"source":["df=pd.read_csv('wine.csv')\n","df.shape"]},{"cell_type":"code","execution_count":5,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":226},"executionInfo":{"elapsed":2,"status":"ok","timestamp":1710846884458,"user":{"displayName":"Paweł Leszczyński","userId":"09579002163402024035"},"user_tz":-60},"id":"Lp-ACYx6a5pO","outputId":"3c5ed950-faf9-4ad3-9b14-0c09a1f7e97f"},"outputs":[{"data":{"application/vnd.google.colaboratory.intrinsic+json":{"summary":"{\n  \"name\": \"df\",\n  \"rows\": 178,\n  \"fields\": [\n    {\n      \"column\": \"Alcohol\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.8118265380058575,\n        \"min\": 11.03,\n        \"max\": 14.83,\n        \"num_unique_values\": 126,\n        \"samples\": [\n          11.62,\n          13.64,\n          13.69\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Malic.acid\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.1171460976144627,\n        \"min\": 0.74,\n        \"max\": 5.8,\n        \"num_unique_values\": 133,\n        \"samples\": [\n          1.21,\n          2.83,\n          1.8\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Ash\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.27434400906081485,\n        \"min\": 1.36,\n        \"max\": 3.23,\n        \"num_unique_values\": 79,\n        \"samples\": [\n          2.31,\n          2.43,\n          2.52\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Acl\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.339563767173505,\n        \"min\": 10.6,\n        \"max\": 30.0,\n        \"num_unique_values\": 63,\n        \"samples\": [\n          25.5,\n          28.5,\n          15.6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Mg\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 14,\n        \"min\": 70,\n        \"max\": 162,\n        \"num_unique_values\": 53,\n        \"samples\": [\n          126,\n          85,\n          162\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Phenols\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.6258510488339893,\n        \"min\": 0.98,\n        \"max\": 3.88,\n        \"num_unique_values\": 97,\n        \"samples\": [\n          1.68,\n          2.11,\n          1.35\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Flavanoids\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.9988586850169467,\n        \"min\": 0.34,\n        \"max\": 5.08,\n        \"num_unique_values\": 132,\n        \"samples\": [\n          3.18,\n          2.5,\n          3.17\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Nonflavanoid.phenols\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.12445334029667937,\n        \"min\": 0.13,\n        \"max\": 0.66,\n        \"num_unique_values\": 39,\n        \"samples\": [\n          0.58,\n          0.41,\n          0.39\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Proanth\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.5723588626747613,\n        \"min\": 0.41,\n        \"max\": 3.58,\n        \"num_unique_values\": 101,\n        \"samples\": [\n          0.75,\n          1.77,\n          1.42\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Color.int\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.318285871822413,\n        \"min\": 1.28,\n        \"max\": 13.0,\n        \"num_unique_values\": 132,\n        \"samples\": [\n          2.95,\n          3.3,\n          5.1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Hue\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.22857156582982338,\n        \"min\": 0.48,\n        \"max\": 1.71,\n        \"num_unique_values\": 78,\n        \"samples\": [\n          1.22,\n          1.04,\n          1.45\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"OD\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.7099904287650504,\n        \"min\": 1.27,\n        \"max\": 4.0,\n        \"num_unique_values\": 122,\n        \"samples\": [\n          4.0,\n          1.82,\n          1.59\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Proline\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 314,\n        \"min\": 278,\n        \"max\": 1680,\n        \"num_unique_values\": 121,\n        \"samples\": [\n          1375,\n          1270,\n          735\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Wine\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 3,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          1,\n          2,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}","type":"dataframe","variable_name":"df"},"text/html":["\n","  \u003cdiv id=\"df-24b25829-4c85-4ca3-90cd-b72b7c1adc58\" class=\"colab-df-container\"\u003e\n","    \u003cdiv\u003e\n","\u003cstyle scoped\u003e\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","\u003c/style\u003e\n","\u003ctable border=\"1\" class=\"dataframe\"\u003e\n","  \u003cthead\u003e\n","    \u003ctr style=\"text-align: right;\"\u003e\n","      \u003cth\u003e\u003c/th\u003e\n","      \u003cth\u003eAlcohol\u003c/th\u003e\n","      \u003cth\u003eMalic.acid\u003c/th\u003e\n","      \u003cth\u003eAsh\u003c/th\u003e\n","      \u003cth\u003eAcl\u003c/th\u003e\n","      \u003cth\u003eMg\u003c/th\u003e\n","      \u003cth\u003ePhenols\u003c/th\u003e\n","      \u003cth\u003eFlavanoids\u003c/th\u003e\n","      \u003cth\u003eNonflavanoid.phenols\u003c/th\u003e\n","      \u003cth\u003eProanth\u003c/th\u003e\n","      \u003cth\u003eColor.int\u003c/th\u003e\n","      \u003cth\u003eHue\u003c/th\u003e\n","      \u003cth\u003eOD\u003c/th\u003e\n","      \u003cth\u003eProline\u003c/th\u003e\n","      \u003cth\u003eWine\u003c/th\u003e\n","    \u003c/tr\u003e\n","  \u003c/thead\u003e\n","  \u003ctbody\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e0\u003c/th\u003e\n","      \u003ctd\u003e14.23\u003c/td\u003e\n","      \u003ctd\u003e1.71\u003c/td\u003e\n","      \u003ctd\u003e2.43\u003c/td\u003e\n","      \u003ctd\u003e15.6\u003c/td\u003e\n","      \u003ctd\u003e127\u003c/td\u003e\n","      \u003ctd\u003e2.80\u003c/td\u003e\n","      \u003ctd\u003e3.06\u003c/td\u003e\n","      \u003ctd\u003e0.28\u003c/td\u003e\n","      \u003ctd\u003e2.29\u003c/td\u003e\n","      \u003ctd\u003e5.64\u003c/td\u003e\n","      \u003ctd\u003e1.04\u003c/td\u003e\n","      \u003ctd\u003e3.92\u003c/td\u003e\n","      \u003ctd\u003e1065\u003c/td\u003e\n","      \u003ctd\u003e1\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e1\u003c/th\u003e\n","      \u003ctd\u003e13.20\u003c/td\u003e\n","      \u003ctd\u003e1.78\u003c/td\u003e\n","      \u003ctd\u003e2.14\u003c/td\u003e\n","      \u003ctd\u003e11.2\u003c/td\u003e\n","      \u003ctd\u003e100\u003c/td\u003e\n","      \u003ctd\u003e2.65\u003c/td\u003e\n","      \u003ctd\u003e2.76\u003c/td\u003e\n","      \u003ctd\u003e0.26\u003c/td\u003e\n","      \u003ctd\u003e1.28\u003c/td\u003e\n","      \u003ctd\u003e4.38\u003c/td\u003e\n","      \u003ctd\u003e1.05\u003c/td\u003e\n","      \u003ctd\u003e3.40\u003c/td\u003e\n","      \u003ctd\u003e1050\u003c/td\u003e\n","      \u003ctd\u003e1\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e2\u003c/th\u003e\n","      \u003ctd\u003e13.16\u003c/td\u003e\n","      \u003ctd\u003e2.36\u003c/td\u003e\n","      \u003ctd\u003e2.67\u003c/td\u003e\n","      \u003ctd\u003e18.6\u003c/td\u003e\n","      \u003ctd\u003e101\u003c/td\u003e\n","      \u003ctd\u003e2.80\u003c/td\u003e\n","      \u003ctd\u003e3.24\u003c/td\u003e\n","      \u003ctd\u003e0.30\u003c/td\u003e\n","      \u003ctd\u003e2.81\u003c/td\u003e\n","      \u003ctd\u003e5.68\u003c/td\u003e\n","      \u003ctd\u003e1.03\u003c/td\u003e\n","      \u003ctd\u003e3.17\u003c/td\u003e\n","      \u003ctd\u003e1185\u003c/td\u003e\n","      \u003ctd\u003e1\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e3\u003c/th\u003e\n","      \u003ctd\u003e14.37\u003c/td\u003e\n","      \u003ctd\u003e1.95\u003c/td\u003e\n","      \u003ctd\u003e2.50\u003c/td\u003e\n","      \u003ctd\u003e16.8\u003c/td\u003e\n","      \u003ctd\u003e113\u003c/td\u003e\n","      \u003ctd\u003e3.85\u003c/td\u003e\n","      \u003ctd\u003e3.49\u003c/td\u003e\n","      \u003ctd\u003e0.24\u003c/td\u003e\n","      \u003ctd\u003e2.18\u003c/td\u003e\n","      \u003ctd\u003e7.80\u003c/td\u003e\n","      \u003ctd\u003e0.86\u003c/td\u003e\n","      \u003ctd\u003e3.45\u003c/td\u003e\n","      \u003ctd\u003e1480\u003c/td\u003e\n","      \u003ctd\u003e1\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e4\u003c/th\u003e\n","      \u003ctd\u003e13.24\u003c/td\u003e\n","      \u003ctd\u003e2.59\u003c/td\u003e\n","      \u003ctd\u003e2.87\u003c/td\u003e\n","      \u003ctd\u003e21.0\u003c/td\u003e\n","      \u003ctd\u003e118\u003c/td\u003e\n","      \u003ctd\u003e2.80\u003c/td\u003e\n","      \u003ctd\u003e2.69\u003c/td\u003e\n","      \u003ctd\u003e0.39\u003c/td\u003e\n","      \u003ctd\u003e1.82\u003c/td\u003e\n","      \u003ctd\u003e4.32\u003c/td\u003e\n","      \u003ctd\u003e1.04\u003c/td\u003e\n","      \u003ctd\u003e2.93\u003c/td\u003e\n","      \u003ctd\u003e735\u003c/td\u003e\n","      \u003ctd\u003e1\u003c/td\u003e\n","    \u003c/tr\u003e\n","  \u003c/tbody\u003e\n","\u003c/table\u003e\n","\u003c/div\u003e\n","    \u003cdiv class=\"colab-df-buttons\"\u003e\n","\n","  \u003cdiv class=\"colab-df-container\"\u003e\n","    \u003cbutton class=\"colab-df-convert\" onclick=\"convertToInteractive('df-24b25829-4c85-4ca3-90cd-b72b7c1adc58')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\"\u003e\n","\n","  \u003csvg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\"\u003e\n","    \u003cpath d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/\u003e\n","  \u003c/svg\u003e\n","    \u003c/button\u003e\n","\n","  \u003cstyle\u003e\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  \u003c/style\u003e\n","\n","    \u003cscript\u003e\n","      const buttonEl =\n","        document.querySelector('#df-24b25829-4c85-4ca3-90cd-b72b7c1adc58 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-24b25829-4c85-4ca3-90cd-b72b7c1adc58');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '\u003ca target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb\u003edata table notebook\u003c/a\u003e'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    \u003c/script\u003e\n","  \u003c/div\u003e\n","\n","\n","\u003cdiv id=\"df-edac3f3f-a956-45db-8b34-41a90b10052e\"\u003e\n","  \u003cbutton class=\"colab-df-quickchart\" onclick=\"quickchart('df-edac3f3f-a956-45db-8b34-41a90b10052e')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\"\u003e\n","\n","\u003csvg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\"\u003e\n","    \u003cg\u003e\n","        \u003cpath d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/\u003e\n","    \u003c/g\u003e\n","\u003c/svg\u003e\n","  \u003c/button\u003e\n","\n","\u003cstyle\u003e\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","\u003c/style\u003e\n","\n","  \u003cscript\u003e\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() =\u003e {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-edac3f3f-a956-45db-8b34-41a90b10052e button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  \u003c/script\u003e\n","\u003c/div\u003e\n","    \u003c/div\u003e\n","  \u003c/div\u003e\n"],"text/plain":["   Alcohol  Malic.acid   Ash   Acl   Mg  Phenols  Flavanoids  \\\n","0    14.23        1.71  2.43  15.6  127     2.80        3.06   \n","1    13.20        1.78  2.14  11.2  100     2.65        2.76   \n","2    13.16        2.36  2.67  18.6  101     2.80        3.24   \n","3    14.37        1.95  2.50  16.8  113     3.85        3.49   \n","4    13.24        2.59  2.87  21.0  118     2.80        2.69   \n","\n","   Nonflavanoid.phenols  Proanth  Color.int   Hue    OD  Proline  Wine  \n","0                  0.28     2.29       5.64  1.04  3.92     1065     1  \n","1                  0.26     1.28       4.38  1.05  3.40     1050     1  \n","2                  0.30     2.81       5.68  1.03  3.17     1185     1  \n","3                  0.24     2.18       7.80  0.86  3.45     1480     1  \n","4                  0.39     1.82       4.32  1.04  2.93      735     1  "]},"execution_count":5,"metadata":{},"output_type":"execute_result"}],"source":["df.head(5)"]},{"cell_type":"code","execution_count":7,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":320},"executionInfo":{"elapsed":3,"status":"ok","timestamp":1710846899913,"user":{"displayName":"Paweł Leszczyński","userId":"09579002163402024035"},"user_tz":-60},"id":"NP4IYOHGa7e0","outputId":"41a21923-835a-43c1-89f6-593b95d2cbd4"},"outputs":[{"data":{"application/vnd.google.colaboratory.intrinsic+json":{"summary":"{\n  \"name\": \"df\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"Alcohol\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 59.11804622765535,\n        \"min\": 0.8118265380058575,\n        \"max\": 178.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          13.00061797752809,\n          13.05,\n          178.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Malic.acid\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 62.116878053835904,\n        \"min\": 0.74,\n        \"max\": 178.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          2.3363483146067416,\n          1.8650000000000002,\n          178.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Ash\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 62.213612771606805,\n        \"min\": 0.27434400906081485,\n        \"max\": 178.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          2.3665168539325845,\n          2.36,\n          178.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Acl\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 57.32526338306687,\n        \"min\": 3.339563767173505,\n        \"max\": 178.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          19.49494382022472,\n          19.5,\n          178.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Mg\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 51.18081686409121,\n        \"min\": 14.282483515295665,\n        \"max\": 178.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          99.74157303370787,\n          98.0,\n          178.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Phenols\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 62.19953212829461,\n        \"min\": 0.6258510488339893,\n        \"max\": 178.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          2.295112359550562,\n          2.355,\n          178.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Flavanoids\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 62.20866774807846,\n        \"min\": 0.34,\n        \"max\": 178.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          2.0292696629213487,\n          2.135,\n          178.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Nonflavanoid.phenols\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 62.81536936528359,\n        \"min\": 0.12445334029667937,\n        \"max\": 178.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.3618539325842696,\n          0.34,\n          178.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Proanth\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 62.389141510191415,\n        \"min\": 0.41,\n        \"max\": 178.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          1.5908988764044945,\n          1.5550000000000002,\n          178.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Color.int\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 61.23070389608627,\n        \"min\": 1.28,\n        \"max\": 178.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          5.058089882022472,\n          4.6899999999999995,\n          178.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Hue\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 62.618701002452724,\n        \"min\": 0.22857156582982338,\n        \"max\": 178.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.9574494382022471,\n          0.965,\n          178.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"OD\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 62.109005977625,\n        \"min\": 0.7099904287650504,\n        \"max\": 178.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          2.6116853932584267,\n          2.78,\n          178.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Proline\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 489.2848273029377,\n        \"min\": 178.0,\n        \"max\": 1680.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          746.8932584269663,\n          673.5,\n          178.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Wine\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 62.2964284117262,\n        \"min\": 0.7750349899850564,\n        \"max\": 178.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          178.0,\n          1.9382022471910112,\n          3.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}","type":"dataframe"},"text/html":["\n","  \u003cdiv id=\"df-c2b88fb4-affd-4544-87a2-7c067ca394d3\" class=\"colab-df-container\"\u003e\n","    \u003cdiv\u003e\n","\u003cstyle scoped\u003e\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","\u003c/style\u003e\n","\u003ctable border=\"1\" class=\"dataframe\"\u003e\n","  \u003cthead\u003e\n","    \u003ctr style=\"text-align: right;\"\u003e\n","      \u003cth\u003e\u003c/th\u003e\n","      \u003cth\u003eAlcohol\u003c/th\u003e\n","      \u003cth\u003eMalic.acid\u003c/th\u003e\n","      \u003cth\u003eAsh\u003c/th\u003e\n","      \u003cth\u003eAcl\u003c/th\u003e\n","      \u003cth\u003eMg\u003c/th\u003e\n","      \u003cth\u003ePhenols\u003c/th\u003e\n","      \u003cth\u003eFlavanoids\u003c/th\u003e\n","      \u003cth\u003eNonflavanoid.phenols\u003c/th\u003e\n","      \u003cth\u003eProanth\u003c/th\u003e\n","      \u003cth\u003eColor.int\u003c/th\u003e\n","      \u003cth\u003eHue\u003c/th\u003e\n","      \u003cth\u003eOD\u003c/th\u003e\n","      \u003cth\u003eProline\u003c/th\u003e\n","      \u003cth\u003eWine\u003c/th\u003e\n","    \u003c/tr\u003e\n","  \u003c/thead\u003e\n","  \u003ctbody\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003ecount\u003c/th\u003e\n","      \u003ctd\u003e178.000000\u003c/td\u003e\n","      \u003ctd\u003e178.000000\u003c/td\u003e\n","      \u003ctd\u003e178.000000\u003c/td\u003e\n","      \u003ctd\u003e178.000000\u003c/td\u003e\n","      \u003ctd\u003e178.000000\u003c/td\u003e\n","      \u003ctd\u003e178.000000\u003c/td\u003e\n","      \u003ctd\u003e178.000000\u003c/td\u003e\n","      \u003ctd\u003e178.000000\u003c/td\u003e\n","      \u003ctd\u003e178.000000\u003c/td\u003e\n","      \u003ctd\u003e178.000000\u003c/td\u003e\n","      \u003ctd\u003e178.000000\u003c/td\u003e\n","      \u003ctd\u003e178.000000\u003c/td\u003e\n","      \u003ctd\u003e178.000000\u003c/td\u003e\n","      \u003ctd\u003e178.000000\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003emean\u003c/th\u003e\n","      \u003ctd\u003e13.000618\u003c/td\u003e\n","      \u003ctd\u003e2.336348\u003c/td\u003e\n","      \u003ctd\u003e2.366517\u003c/td\u003e\n","      \u003ctd\u003e19.494944\u003c/td\u003e\n","      \u003ctd\u003e99.741573\u003c/td\u003e\n","      \u003ctd\u003e2.295112\u003c/td\u003e\n","      \u003ctd\u003e2.029270\u003c/td\u003e\n","      \u003ctd\u003e0.361854\u003c/td\u003e\n","      \u003ctd\u003e1.590899\u003c/td\u003e\n","      \u003ctd\u003e5.058090\u003c/td\u003e\n","      \u003ctd\u003e0.957449\u003c/td\u003e\n","      \u003ctd\u003e2.611685\u003c/td\u003e\n","      \u003ctd\u003e746.893258\u003c/td\u003e\n","      \u003ctd\u003e1.938202\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003estd\u003c/th\u003e\n","      \u003ctd\u003e0.811827\u003c/td\u003e\n","      \u003ctd\u003e1.117146\u003c/td\u003e\n","      \u003ctd\u003e0.274344\u003c/td\u003e\n","      \u003ctd\u003e3.339564\u003c/td\u003e\n","      \u003ctd\u003e14.282484\u003c/td\u003e\n","      \u003ctd\u003e0.625851\u003c/td\u003e\n","      \u003ctd\u003e0.998859\u003c/td\u003e\n","      \u003ctd\u003e0.124453\u003c/td\u003e\n","      \u003ctd\u003e0.572359\u003c/td\u003e\n","      \u003ctd\u003e2.318286\u003c/td\u003e\n","      \u003ctd\u003e0.228572\u003c/td\u003e\n","      \u003ctd\u003e0.709990\u003c/td\u003e\n","      \u003ctd\u003e314.907474\u003c/td\u003e\n","      \u003ctd\u003e0.775035\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003emin\u003c/th\u003e\n","      \u003ctd\u003e11.030000\u003c/td\u003e\n","      \u003ctd\u003e0.740000\u003c/td\u003e\n","      \u003ctd\u003e1.360000\u003c/td\u003e\n","      \u003ctd\u003e10.600000\u003c/td\u003e\n","      \u003ctd\u003e70.000000\u003c/td\u003e\n","      \u003ctd\u003e0.980000\u003c/td\u003e\n","      \u003ctd\u003e0.340000\u003c/td\u003e\n","      \u003ctd\u003e0.130000\u003c/td\u003e\n","      \u003ctd\u003e0.410000\u003c/td\u003e\n","      \u003ctd\u003e1.280000\u003c/td\u003e\n","      \u003ctd\u003e0.480000\u003c/td\u003e\n","      \u003ctd\u003e1.270000\u003c/td\u003e\n","      \u003ctd\u003e278.000000\u003c/td\u003e\n","      \u003ctd\u003e1.000000\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e25%\u003c/th\u003e\n","      \u003ctd\u003e12.362500\u003c/td\u003e\n","      \u003ctd\u003e1.602500\u003c/td\u003e\n","      \u003ctd\u003e2.210000\u003c/td\u003e\n","      \u003ctd\u003e17.200000\u003c/td\u003e\n","      \u003ctd\u003e88.000000\u003c/td\u003e\n","      \u003ctd\u003e1.742500\u003c/td\u003e\n","      \u003ctd\u003e1.205000\u003c/td\u003e\n","      \u003ctd\u003e0.270000\u003c/td\u003e\n","      \u003ctd\u003e1.250000\u003c/td\u003e\n","      \u003ctd\u003e3.220000\u003c/td\u003e\n","      \u003ctd\u003e0.782500\u003c/td\u003e\n","      \u003ctd\u003e1.937500\u003c/td\u003e\n","      \u003ctd\u003e500.500000\u003c/td\u003e\n","      \u003ctd\u003e1.000000\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e50%\u003c/th\u003e\n","      \u003ctd\u003e13.050000\u003c/td\u003e\n","      \u003ctd\u003e1.865000\u003c/td\u003e\n","      \u003ctd\u003e2.360000\u003c/td\u003e\n","      \u003ctd\u003e19.500000\u003c/td\u003e\n","      \u003ctd\u003e98.000000\u003c/td\u003e\n","      \u003ctd\u003e2.355000\u003c/td\u003e\n","      \u003ctd\u003e2.135000\u003c/td\u003e\n","      \u003ctd\u003e0.340000\u003c/td\u003e\n","      \u003ctd\u003e1.555000\u003c/td\u003e\n","      \u003ctd\u003e4.690000\u003c/td\u003e\n","      \u003ctd\u003e0.965000\u003c/td\u003e\n","      \u003ctd\u003e2.780000\u003c/td\u003e\n","      \u003ctd\u003e673.500000\u003c/td\u003e\n","      \u003ctd\u003e2.000000\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e75%\u003c/th\u003e\n","      \u003ctd\u003e13.677500\u003c/td\u003e\n","      \u003ctd\u003e3.082500\u003c/td\u003e\n","      \u003ctd\u003e2.557500\u003c/td\u003e\n","      \u003ctd\u003e21.500000\u003c/td\u003e\n","      \u003ctd\u003e107.000000\u003c/td\u003e\n","      \u003ctd\u003e2.800000\u003c/td\u003e\n","      \u003ctd\u003e2.875000\u003c/td\u003e\n","      \u003ctd\u003e0.437500\u003c/td\u003e\n","      \u003ctd\u003e1.950000\u003c/td\u003e\n","      \u003ctd\u003e6.200000\u003c/td\u003e\n","      \u003ctd\u003e1.120000\u003c/td\u003e\n","      \u003ctd\u003e3.170000\u003c/td\u003e\n","      \u003ctd\u003e985.000000\u003c/td\u003e\n","      \u003ctd\u003e3.000000\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003emax\u003c/th\u003e\n","      \u003ctd\u003e14.830000\u003c/td\u003e\n","      \u003ctd\u003e5.800000\u003c/td\u003e\n","      \u003ctd\u003e3.230000\u003c/td\u003e\n","      \u003ctd\u003e30.000000\u003c/td\u003e\n","      \u003ctd\u003e162.000000\u003c/td\u003e\n","      \u003ctd\u003e3.880000\u003c/td\u003e\n","      \u003ctd\u003e5.080000\u003c/td\u003e\n","      \u003ctd\u003e0.660000\u003c/td\u003e\n","      \u003ctd\u003e3.580000\u003c/td\u003e\n","      \u003ctd\u003e13.000000\u003c/td\u003e\n","      \u003ctd\u003e1.710000\u003c/td\u003e\n","      \u003ctd\u003e4.000000\u003c/td\u003e\n","      \u003ctd\u003e1680.000000\u003c/td\u003e\n","      \u003ctd\u003e3.000000\u003c/td\u003e\n","    \u003c/tr\u003e\n","  \u003c/tbody\u003e\n","\u003c/table\u003e\n","\u003c/div\u003e\n","    \u003cdiv class=\"colab-df-buttons\"\u003e\n","\n","  \u003cdiv class=\"colab-df-container\"\u003e\n","    \u003cbutton class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c2b88fb4-affd-4544-87a2-7c067ca394d3')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\"\u003e\n","\n","  \u003csvg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\"\u003e\n","    \u003cpath d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/\u003e\n","  \u003c/svg\u003e\n","    \u003c/button\u003e\n","\n","  \u003cstyle\u003e\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  \u003c/style\u003e\n","\n","    \u003cscript\u003e\n","      const buttonEl =\n","        document.querySelector('#df-c2b88fb4-affd-4544-87a2-7c067ca394d3 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-c2b88fb4-affd-4544-87a2-7c067ca394d3');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '\u003ca target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb\u003edata table notebook\u003c/a\u003e'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    \u003c/script\u003e\n","  \u003c/div\u003e\n","\n","\n","\u003cdiv id=\"df-64b80273-6ed2-4d0d-81df-8758cf75913e\"\u003e\n","  \u003cbutton class=\"colab-df-quickchart\" onclick=\"quickchart('df-64b80273-6ed2-4d0d-81df-8758cf75913e')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\"\u003e\n","\n","\u003csvg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\"\u003e\n","    \u003cg\u003e\n","        \u003cpath d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/\u003e\n","    \u003c/g\u003e\n","\u003c/svg\u003e\n","  \u003c/button\u003e\n","\n","\u003cstyle\u003e\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","\u003c/style\u003e\n","\n","  \u003cscript\u003e\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() =\u003e {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-64b80273-6ed2-4d0d-81df-8758cf75913e button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  \u003c/script\u003e\n","\u003c/div\u003e\n","    \u003c/div\u003e\n","  \u003c/div\u003e\n"],"text/plain":["          Alcohol  Malic.acid         Ash         Acl          Mg     Phenols  \\\n","count  178.000000  178.000000  178.000000  178.000000  178.000000  178.000000   \n","mean    13.000618    2.336348    2.366517   19.494944   99.741573    2.295112   \n","std      0.811827    1.117146    0.274344    3.339564   14.282484    0.625851   \n","min     11.030000    0.740000    1.360000   10.600000   70.000000    0.980000   \n","25%     12.362500    1.602500    2.210000   17.200000   88.000000    1.742500   \n","50%     13.050000    1.865000    2.360000   19.500000   98.000000    2.355000   \n","75%     13.677500    3.082500    2.557500   21.500000  107.000000    2.800000   \n","max     14.830000    5.800000    3.230000   30.000000  162.000000    3.880000   \n","\n","       Flavanoids  Nonflavanoid.phenols     Proanth   Color.int         Hue  \\\n","count  178.000000            178.000000  178.000000  178.000000  178.000000   \n","mean     2.029270              0.361854    1.590899    5.058090    0.957449   \n","std      0.998859              0.124453    0.572359    2.318286    0.228572   \n","min      0.340000              0.130000    0.410000    1.280000    0.480000   \n","25%      1.205000              0.270000    1.250000    3.220000    0.782500   \n","50%      2.135000              0.340000    1.555000    4.690000    0.965000   \n","75%      2.875000              0.437500    1.950000    6.200000    1.120000   \n","max      5.080000              0.660000    3.580000   13.000000    1.710000   \n","\n","               OD      Proline        Wine  \n","count  178.000000   178.000000  178.000000  \n","mean     2.611685   746.893258    1.938202  \n","std      0.709990   314.907474    0.775035  \n","min      1.270000   278.000000    1.000000  \n","25%      1.937500   500.500000    1.000000  \n","50%      2.780000   673.500000    2.000000  \n","75%      3.170000   985.000000    3.000000  \n","max      4.000000  1680.000000    3.000000  "]},"execution_count":7,"metadata":{},"output_type":"execute_result"}],"source":["df.describe()"]},{"cell_type":"code","execution_count":8,"metadata":{"colab":{"background_save":true},"executionInfo":{"elapsed":1,"status":"ok","timestamp":1710846942687,"user":{"displayName":"Paweł Leszczyński","userId":"09579002163402024035"},"user_tz":-60},"id":"gMuevupaa9LK"},"outputs":[{"ename":"NameError","evalue":"name 'df' is not defined","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m\u003cipython-input-1-e0f2effcd69c\u003e\u001b[0m in \u001b[0;36m\u003ccell line: 1\u003e\u001b[0;34m()\u001b[0m\n\u001b[0;32m----\u003e 1\u001b[0;31m \u001b[0mx\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0miloc\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0mdf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0miloc\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mdf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'df' is not defined"]}],"source":["x=df.iloc[:,0:12].values\n","y=df.iloc[:,13].values"]},{"cell_type":"code","execution_count":14,"metadata":{"executionInfo":{"elapsed":270,"status":"ok","timestamp":1710847202097,"user":{"displayName":"Paweł Leszczyński","userId":"09579002163402024035"},"user_tz":-60},"id":"zoHq-avxbgES"},"outputs":[],"source":["x_train,x_test,y_train,y_test=train_test_split(x,y, test_size=0.2, random_state=0)"]},{"cell_type":"code","execution_count":15,"metadata":{"executionInfo":{"elapsed":4,"status":"ok","timestamp":1710847203414,"user":{"displayName":"Paweł Leszczyński","userId":"09579002163402024035"},"user_tz":-60},"id":"QiZqY_FzbpSC"},"outputs":[],"source":["sc_x=StandardScaler()\n","x_train= sc_x.fit_transform(x_train)\n","x_test= sc_x.fit_transform(x_test)"]},{"cell_type":"code","execution_count":16,"metadata":{"executionInfo":{"elapsed":2,"status":"ok","timestamp":1710847219559,"user":{"displayName":"Paweł Leszczyński","userId":"09579002163402024035"},"user_tz":-60},"id":"PTuX11nfcKS2"},"outputs":[],"source":["pca=PCA(n_components=2)"]},{"cell_type":"code","execution_count":18,"metadata":{"executionInfo":{"elapsed":263,"status":"ok","timestamp":1710847259251,"user":{"displayName":"Paweł Leszczyński","userId":"09579002163402024035"},"user_tz":-60},"id":"YhCkKCGOcNRK"},"outputs":[],"source":["x_train=pca.fit_transform(x_train)\n","x_test=pca.fit_transform(x_test)"]},{"cell_type":"code","execution_count":20,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":3,"status":"ok","timestamp":1710847279228,"user":{"displayName":"Paweł Leszczyński","userId":"09579002163402024035"},"user_tz":-60},"id":"geKX73FpcW75","outputId":"5a32721e-4d54-4ab1-91c3-618279fc1607"},"outputs":[{"data":{"text/plain":["array([0.65171329, 0.34828671])"]},"execution_count":20,"metadata":{},"output_type":"execute_result"}],"source":["explained_varience= pca.explained_variance_ratio_\n","explained_varience"]},{"cell_type":"code","execution_count":24,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":74},"executionInfo":{"elapsed":259,"status":"ok","timestamp":1710847368198,"user":{"displayName":"Paweł Leszczyński","userId":"09579002163402024035"},"user_tz":-60},"id":"vPvClUw1cb38","outputId":"2d2950aa-a7f2-4994-dfb6-07e66b3f605e"},"outputs":[{"data":{"text/html":["\u003cstyle\u003e#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}\u003c/style\u003e\u003cdiv id=\"sk-container-id-2\" class=\"sk-top-container\"\u003e\u003cdiv class=\"sk-text-repr-fallback\"\u003e\u003cpre\u003eLogisticRegression(random_state=0)\u003c/pre\u003e\u003cb\u003eIn a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. \u003cbr /\u003eOn GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.\u003c/b\u003e\u003c/div\u003e\u003cdiv class=\"sk-container\" hidden\u003e\u003cdiv class=\"sk-item\"\u003e\u003cdiv class=\"sk-estimator sk-toggleable\"\u003e\u003cinput class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked\u003e\u003clabel for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\"\u003eLogisticRegression\u003c/label\u003e\u003cdiv class=\"sk-toggleable__content\"\u003e\u003cpre\u003eLogisticRegression(random_state=0)\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e"],"text/plain":["LogisticRegression(random_state=0)"]},"execution_count":24,"metadata":{},"output_type":"execute_result"}],"source":["lr_model=LogisticRegression(random_state=0)\n","lr_model.fit(x_train,y_train)"]},{"cell_type":"code","execution_count":26,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":249,"status":"ok","timestamp":1710847386723,"user":{"displayName":"Paweł Leszczyński","userId":"09579002163402024035"},"user_tz":-60},"id":"uVrSMafDcmMD","outputId":"82a88e1e-f948-4b00-dbc2-f83d767843b8"},"outputs":[{"data":{"text/plain":["array([1, 3, 2, 1, 2, 1, 1, 3, 2, 2, 3, 3, 1, 2, 3, 2, 1, 1, 3, 1, 2, 2,\n","       1, 2, 2, 2, 2, 2, 3, 3, 1, 1, 3, 1, 1, 1])"]},"execution_count":26,"metadata":{},"output_type":"execute_result"}],"source":["y_pred=lr_model.predict(x_test)\n","y_pred"]},{"cell_type":"code","execution_count":28,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":5,"status":"ok","timestamp":1710847478770,"user":{"displayName":"Paweł Leszczyński","userId":"09579002163402024035"},"user_tz":-60},"id":"wiD4hA-Dcq_X","outputId":"2693a645-05d9-48df-88e7-cdb8479747f5"},"outputs":[{"data":{"text/plain":["array([[13,  1,  0],\n","       [ 1, 12,  3],\n","       [ 0,  0,  6]])"]},"execution_count":28,"metadata":{},"output_type":"execute_result"}],"source":["conf_matrix= confusion_matrix(y_test,y_pred)\n","conf_matrix"]},{"cell_type":"code","execution_count":29,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2,"status":"ok","timestamp":1710847501622,"user":{"displayName":"Paweł Leszczyński","userId":"09579002163402024035"},"user_tz":-60},"id":"AlWrYvURdMjn","outputId":"e65f6bf8-4743-4897-dd75-60885a146ed3"},"outputs":[{"data":{"text/plain":["0.8611111111111112"]},"execution_count":29,"metadata":{},"output_type":"execute_result"}],"source":["accuracy= accuracy_score(y_test,y_pred)\n","accuracy"]},{"cell_type":"code","execution_count":31,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":275,"status":"ok","timestamp":1710847538795,"user":{"displayName":"Paweł Leszczyński","userId":"09579002163402024035"},"user_tz":-60},"id":"sgWXCZaidSIr","outputId":"9806e85d-002f-42ad-adba-5dcc299e1599"},"outputs":[{"data":{"text/plain":["array([3, 2, 2, 3, 1, 1, 2, 2, 2, 1, 3, 2, 3, 1, 3, 3, 1, 3, 1, 2, 3, 3,\n","       1, 3, 3, 2, 3, 3, 2, 2, 3, 2, 1, 2, 1, 2, 1, 1, 2, 1, 3, 3, 2, 2,\n","       2, 3, 3, 1, 3, 2, 2, 2, 2, 2, 1, 1, 2, 1, 3, 2, 3, 1, 1, 2, 1, 2,\n","       2, 1, 3, 2, 1, 2, 2, 2, 2, 1, 3, 3, 1, 1, 2, 3, 1, 1, 2, 2, 1, 1,\n","       2, 3, 2, 2, 2, 3, 1, 2, 3, 3, 1, 2, 3, 1, 3, 2, 1, 1, 2, 1, 3, 2,\n","       3, 1, 3, 3, 3, 1, 2, 2, 2, 2, 3, 3, 2, 2, 1, 2, 3, 3, 1, 1, 3, 2,\n","       2, 2, 1, 1, 1, 2, 2, 2, 1, 3])"]},"execution_count":31,"metadata":{},"output_type":"execute_result"}],"source":["y_pred=lr_model.predict(x_train)\n","y_pred"]},{"cell_type":"code","execution_count":32,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2,"status":"ok","timestamp":1710847572776,"user":{"displayName":"Paweł Leszczyński","userId":"09579002163402024035"},"user_tz":-60},"id":"AB4MncY4dbDz","outputId":"1b0cace6-4e65-4c63-9197-e0abb243bb37"},"outputs":[{"data":{"text/plain":["array([[40,  5,  0],\n","       [ 3, 51,  1],\n","       [ 0,  1, 41]])"]},"execution_count":32,"metadata":{},"output_type":"execute_result"}],"source":["conf_matrix=confusion_matrix(y_train,y_pred)\n","conf_matrix"]},{"cell_type":"code","execution_count":33,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":326,"status":"ok","timestamp":1710847591760,"user":{"displayName":"Paweł Leszczyński","userId":"09579002163402024035"},"user_tz":-60},"id":"F4aOtHShdjiQ","outputId":"337d2578-3f57-4513-aeec-6c899a167106"},"outputs":[{"data":{"text/plain":["0.9295774647887324"]},"execution_count":33,"metadata":{},"output_type":"execute_result"}],"source":["accuracy= accuracy_score(y_train,y_pred)\n","accuracy"]},{"cell_type":"code","execution_count":41,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":696},"executionInfo":{"elapsed":1123,"status":"ok","timestamp":1710848222162,"user":{"displayName":"Paweł Leszczyński","userId":"09579002163402024035"},"user_tz":-60},"id":"ckfJAbL_doGP","outputId":"04c6fc4d-62b2-4491-c52a-58af211bbf42"},"outputs":[{"name":"stderr","output_type":"stream","text":["\u003cipython-input-41-c816ce52afef\u003e:9: UserWarning: *c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* \u0026 *y*.  Please use the *color* keyword-argument or provide a 2D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n","  plt.scatter(x_set[y_set==j,0],x_set[y_set==j,1],\n"]},{"data":{"text/html":["\u003cdiv style=\"max-width:800px; border: 1px solid var(--colab-border-color);\"\u003e\u003cstyle\u003e\n","      pre.function-repr-contents {\n","        overflow-x: auto;\n","        padding: 8px 12px;\n","        max-height: 500px;\n","      }\n","\n","      pre.function-repr-contents.function-repr-contents-collapsed {\n","        cursor: pointer;\n","        max-height: 100px;\n","      }\n","    \u003c/style\u003e\n","    \u003cpre style=\"white-space: initial; background:\n","         var(--colab-secondary-surface-color); padding: 8px 12px;\n","         border-bottom: 1px solid var(--colab-border-color);\"\u003e\u003cb\u003ematplotlib.pyplot.show\u003c/b\u003e\u003cbr/\u003edef show(*args, **kwargs)\u003c/pre\u003e\u003cpre class=\"function-repr-contents function-repr-contents-collapsed\" style=\"\"\u003e\u003ca class=\"filepath\" style=\"display:none\" href=\"#\"\u003e/usr/local/lib/python3.10/dist-packages/matplotlib/pyplot.py\u003c/a\u003eDisplay all open figures.\n","\n","Parameters\n","----------\n","block : bool, optional\n","    Whether to wait for all figures to be closed before returning.\n","\n","    If `True` block and run the GUI main loop until all figure windows\n","    are closed.\n","\n","    If `False` ensure that all figure windows are displayed and return\n","    immediately.  In this case, you are responsible for ensuring\n","    that the event loop is running to have responsive figures.\n","\n","    Defaults to True in non-interactive mode and to False in interactive\n","    mode (see `.pyplot.isinteractive`).\n","\n","See Also\n","--------\n","ion : Enable interactive mode, which shows / updates the figure after\n","      every plotting command, so that calling ``show()`` is not necessary.\n","ioff : Disable interactive mode.\n","savefig : Save the figure to an image file instead of showing it on screen.\n","\n","Notes\n","-----\n","**Saving figures to file and showing a window at the same time**\n","\n","If you want an image file as well as a user interface window, use\n","`.pyplot.savefig` before `.pyplot.show`. At the end of (a blocking)\n","``show()`` the figure is closed and thus unregistered from pyplot. Calling\n","`.pyplot.savefig` afterwards would save a new and thus empty figure. This\n","limitation of command order does not apply if the show is non-blocking or\n","if you keep a reference to the figure and use `.Figure.savefig`.\n","\n","**Auto-show in jupyter notebooks**\n","\n","The jupyter backends (activated via ``%matplotlib inline``,\n","``%matplotlib notebook``, or ``%matplotlib widget``), call ``show()`` at\n","the end of every cell by default. Thus, you usually don\u0026#x27;t have to call it\n","explicitly there.\u003c/pre\u003e\n","      \u003cscript\u003e\n","      if (google.colab.kernel.accessAllowed \u0026\u0026 google.colab.files \u0026\u0026 google.colab.files.view) {\n","        for (const element of document.querySelectorAll('.filepath')) {\n","          element.style.display = 'block'\n","          element.onclick = (event) =\u003e {\n","            event.preventDefault();\n","            event.stopPropagation();\n","            google.colab.files.view(element.textContent, 401);\n","          };\n","        }\n","      }\n","      for (const element of document.querySelectorAll('.function-repr-contents')) {\n","        element.onclick = (event) =\u003e {\n","          event.preventDefault();\n","          event.stopPropagation();\n","          element.classList.toggle('function-repr-contents-collapsed');\n","        };\n","      }\n","      \u003c/script\u003e\n","      \u003c/div\u003e"],"text/plain":["\u003cfunction matplotlib.pyplot.show(close=None, block=None)\u003e"]},"execution_count":41,"metadata":{},"output_type":"execute_result"},{"data":{"image/png":"\n","text/plain":["\u003cFigure size 640x480 with 1 Axes\u003e"]},"metadata":{},"output_type":"display_data"}],"source":["x_set, y_set= x_test, y_test\n","x1,x2= np.meshgrid(np.arange(start= x_set[:,0].min()-1, stop=x_set[:,0].max()+1,step=0.01),\n","                   np.arange(start= x_set[:,0].min()-1, stop=x_set[:,0].max()+1,step=0.01))\n","plt.contourf(x1,x2,lr_model.predict(np.array([x1.ravel(),x2.ravel()]).T).reshape(x1.shape),\n","             alpha=0.75, cmap=ListedColormap(('red','green','blue')))\n","plt.xlim(x1.min(),x1.max())\n","plt.xlim(x2.min(),x2.max())\n","for i,j in enumerate(np.unique(y_set)):\n","  plt.scatter(x_set[y_set==j,0],x_set[y_set==j,1],\n","              c=ListedColormap(('red','green','blue'))(i),label=j)\n","\n","plt.title('Logistic Regression(Test set)')\n","plt.xlabel('PCA 1')\n","plt.ylabel('PCA 2')\n","plt.legend()\n","plt.show\n"]},{"cell_type":"code","execution_count":42,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":696},"executionInfo":{"elapsed":1180,"status":"ok","timestamp":1710848296009,"user":{"displayName":"Paweł Leszczyński","userId":"09579002163402024035"},"user_tz":-60},"id":"eDSlNyRcgP7a","outputId":"91adb9a5-8359-4210-9333-cc81e5d0fc6a"},"outputs":[{"name":"stderr","output_type":"stream","text":["\u003cipython-input-42-96e0966cc3ce\u003e:9: UserWarning: *c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* \u0026 *y*.  Please use the *color* keyword-argument or provide a 2D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n","  plt.scatter(x_set[y_set==j,0],x_set[y_set==j,1],\n"]},{"data":{"text/html":["\u003cdiv style=\"max-width:800px; border: 1px solid var(--colab-border-color);\"\u003e\u003cstyle\u003e\n","      pre.function-repr-contents {\n","        overflow-x: auto;\n","        padding: 8px 12px;\n","        max-height: 500px;\n","      }\n","\n","      pre.function-repr-contents.function-repr-contents-collapsed {\n","        cursor: pointer;\n","        max-height: 100px;\n","      }\n","    \u003c/style\u003e\n","    \u003cpre style=\"white-space: initial; background:\n","         var(--colab-secondary-surface-color); padding: 8px 12px;\n","         border-bottom: 1px solid var(--colab-border-color);\"\u003e\u003cb\u003ematplotlib.pyplot.show\u003c/b\u003e\u003cbr/\u003edef show(*args, **kwargs)\u003c/pre\u003e\u003cpre class=\"function-repr-contents function-repr-contents-collapsed\" style=\"\"\u003e\u003ca class=\"filepath\" style=\"display:none\" href=\"#\"\u003e/usr/local/lib/python3.10/dist-packages/matplotlib/pyplot.py\u003c/a\u003eDisplay all open figures.\n","\n","Parameters\n","----------\n","block : bool, optional\n","    Whether to wait for all figures to be closed before returning.\n","\n","    If `True` block and run the GUI main loop until all figure windows\n","    are closed.\n","\n","    If `False` ensure that all figure windows are displayed and return\n","    immediately.  In this case, you are responsible for ensuring\n","    that the event loop is running to have responsive figures.\n","\n","    Defaults to True in non-interactive mode and to False in interactive\n","    mode (see `.pyplot.isinteractive`).\n","\n","See Also\n","--------\n","ion : Enable interactive mode, which shows / updates the figure after\n","      every plotting command, so that calling ``show()`` is not necessary.\n","ioff : Disable interactive mode.\n","savefig : Save the figure to an image file instead of showing it on screen.\n","\n","Notes\n","-----\n","**Saving figures to file and showing a window at the same time**\n","\n","If you want an image file as well as a user interface window, use\n","`.pyplot.savefig` before `.pyplot.show`. At the end of (a blocking)\n","``show()`` the figure is closed and thus unregistered from pyplot. Calling\n","`.pyplot.savefig` afterwards would save a new and thus empty figure. This\n","limitation of command order does not apply if the show is non-blocking or\n","if you keep a reference to the figure and use `.Figure.savefig`.\n","\n","**Auto-show in jupyter notebooks**\n","\n","The jupyter backends (activated via ``%matplotlib inline``,\n","``%matplotlib notebook``, or ``%matplotlib widget``), call ``show()`` at\n","the end of every cell by default. Thus, you usually don\u0026#x27;t have to call it\n","explicitly there.\u003c/pre\u003e\n","      \u003cscript\u003e\n","      if (google.colab.kernel.accessAllowed \u0026\u0026 google.colab.files \u0026\u0026 google.colab.files.view) {\n","        for (const element of document.querySelectorAll('.filepath')) {\n","          element.style.display = 'block'\n","          element.onclick = (event) =\u003e {\n","            event.preventDefault();\n","            event.stopPropagation();\n","            google.colab.files.view(element.textContent, 401);\n","          };\n","        }\n","      }\n","      for (const element of document.querySelectorAll('.function-repr-contents')) {\n","        element.onclick = (event) =\u003e {\n","          event.preventDefault();\n","          event.stopPropagation();\n","          element.classList.toggle('function-repr-contents-collapsed');\n","        };\n","      }\n","      \u003c/script\u003e\n","      \u003c/div\u003e"],"text/plain":["\u003cfunction matplotlib.pyplot.show(close=None, block=None)\u003e"]},"execution_count":42,"metadata":{},"output_type":"execute_result"},{"data":{"image/png":"\n","text/plain":["\u003cFigure size 640x480 with 1 Axes\u003e"]},"metadata":{},"output_type":"display_data"}],"source":["x_set, y_set= x_train, y_train\n","x1,x2= np.meshgrid(np.arange(start= x_set[:,0].min()-1, stop=x_set[:,0].max()+1,step=0.01),\n","                   np.arange(start= x_set[:,0].min()-1, stop=x_set[:,0].max()+1,step=0.01))\n","plt.contourf(x1,x2,lr_model.predict(np.array([x1.ravel(),x2.ravel()]).T).reshape(x1.shape),\n","             alpha=0.75, cmap=ListedColormap(('red','green','blue')))\n","plt.xlim(x1.min(),x1.max())\n","plt.xlim(x2.min(),x2.max())\n","for i,j in enumerate(np.unique(y_set)):\n","  plt.scatter(x_set[y_set==j,0],x_set[y_set==j,1],\n","              c=ListedColormap(('red','green','blue'))(i),label=j)\n","\n","plt.title('Logistic Regression(Train set)')\n","plt.xlabel('PCA 1')\n","plt.ylabel('PCA 2')\n","plt.legend()\n","plt.show"]}],"metadata":{"colab":{"authorship_tag":"ABX9TyPrPWxIHzcgwKUKpH4kA4DE","name":"","version":""},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}