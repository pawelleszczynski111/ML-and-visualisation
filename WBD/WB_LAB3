{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"mount_file_id":"1MA7TSTpGf8k-5t4BTFayGamAvJSyjWWP","authorship_tag":"ABX9TyPRRauJjyLBqcfoZiVzvlzk"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":31,"metadata":{"id":"-uV7CCleP5KD","executionInfo":{"status":"ok","timestamp":1709738826235,"user_tz":-60,"elapsed":353,"user":{"displayName":"Paweł Leszczyński","userId":"09579002163402024035"}}},"outputs":[],"source":["import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.model_selection import train_test_split\n","from sklearn import metrics\n","import seaborn as sns\n","from sklearn.metrics import classification_report"]},{"cell_type":"code","source":["df=pd.read_csv('VLagun_Crus_Basins.csv')"],"metadata":{"id":"309srXjpTlfr","executionInfo":{"status":"ok","timestamp":1709737709199,"user_tz":-60,"elapsed":254,"user":{"displayName":"Paweł Leszczyński","userId":"09579002163402024035"}}},"execution_count":5,"outputs":[]},{"cell_type":"code","source":["x=pd.get_dummies(df)\n","x.drop(['Basin'], inplace=True, axis=1)\n","y=df['Basin']\n","df.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":244},"id":"nQa6-VVaT3Qq","executionInfo":{"status":"ok","timestamp":1709737837583,"user_tz":-60,"elapsed":288,"user":{"displayName":"Paweł Leszczyński","userId":"09579002163402024035"}},"outputId":"447bf598-8071-4cec-a4c2-e1933dc442e5"},"execution_count":10,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   Bosmina longirostris  Ceriodaphnia sp.  Diaphanosoma brachyurum  \\\n","0                   0.0               0.0                      0.0   \n","1                   0.0               0.0                      0.0   \n","2                   0.0               0.0                      0.0   \n","3                   0.0               0.0                      0.0   \n","4                   0.0               0.0                      0.0   \n","\n","   Leptodora kindtii  Acartia longiremis  Acartia tonsa  Eurytemora affinis  \\\n","0                0.0              2.0710         0.9298              0.9251   \n","1                0.0              0.5014         0.0378              0.0000   \n","2                0.0              0.0931         0.0000              0.0000   \n","3                0.0              0.0000         0.0000              0.0129   \n","4                0.0              0.0000         0.0000              0.0141   \n","\n","   Cyclops sp.  Nauplii Cyclopoida  Nauplii Calanoida  \\\n","0       0.0000              0.0025             0.0257   \n","1       0.0000              0.0000             0.0000   \n","2       0.0093              0.0138             0.0006   \n","3       0.0060              0.0140             0.0155   \n","4       0.0000              0.0093             0.0007   \n","\n","   Thermocyclops oithonoides  Eurytemora lacustris  Basin  \n","0                     0.0000                   0.0      0  \n","1                     0.0000                   0.0      0  \n","2                     0.0091                   0.0      0  \n","3                     0.0179                   0.0      0  \n","4                     0.0166                   0.0      0  "],"text/html":["\n","  <div id=\"df-a34d20f1-68f3-41d3-adde-7c4af90e35bf\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Bosmina longirostris</th>\n","      <th>Ceriodaphnia sp.</th>\n","      <th>Diaphanosoma brachyurum</th>\n","      <th>Leptodora kindtii</th>\n","      <th>Acartia longiremis</th>\n","      <th>Acartia tonsa</th>\n","      <th>Eurytemora affinis</th>\n","      <th>Cyclops sp.</th>\n","      <th>Nauplii Cyclopoida</th>\n","      <th>Nauplii Calanoida</th>\n","      <th>Thermocyclops oithonoides</th>\n","      <th>Eurytemora lacustris</th>\n","      <th>Basin</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>2.0710</td>\n","      <td>0.9298</td>\n","      <td>0.9251</td>\n","      <td>0.0000</td>\n","      <td>0.0025</td>\n","      <td>0.0257</td>\n","      <td>0.0000</td>\n","      <td>0.0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.5014</td>\n","      <td>0.0378</td>\n","      <td>0.0000</td>\n","      <td>0.0000</td>\n","      <td>0.0000</td>\n","      <td>0.0000</td>\n","      <td>0.0000</td>\n","      <td>0.0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0931</td>\n","      <td>0.0000</td>\n","      <td>0.0000</td>\n","      <td>0.0093</td>\n","      <td>0.0138</td>\n","      <td>0.0006</td>\n","      <td>0.0091</td>\n","      <td>0.0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0000</td>\n","      <td>0.0000</td>\n","      <td>0.0129</td>\n","      <td>0.0060</td>\n","      <td>0.0140</td>\n","      <td>0.0155</td>\n","      <td>0.0179</td>\n","      <td>0.0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0000</td>\n","      <td>0.0000</td>\n","      <td>0.0141</td>\n","      <td>0.0000</td>\n","      <td>0.0093</td>\n","      <td>0.0007</td>\n","      <td>0.0166</td>\n","      <td>0.0</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a34d20f1-68f3-41d3-adde-7c4af90e35bf')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-a34d20f1-68f3-41d3-adde-7c4af90e35bf button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-a34d20f1-68f3-41d3-adde-7c4af90e35bf');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-6339be2d-6d7b-40a4-b9c4-67e6a812828d\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-6339be2d-6d7b-40a4-b9c4-67e6a812828d')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-6339be2d-6d7b-40a4-b9c4-67e6a812828d button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df","summary":"{\n  \"name\": \"df\",\n  \"rows\": 155,\n  \"fields\": [\n    {\n      \"column\": \"Bosmina longirostris\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.014631109775812954,\n        \"min\": 0.0,\n        \"max\": 0.1653,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          0.0,\n          0.0009,\n          0.0256\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Ceriodaphnia sp.\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.8338385756415333,\n        \"min\": 0.0,\n        \"max\": 7.7912,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          5.1941,\n          4.3284,\n          1.7314\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Diaphanosoma brachyurum\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.7604134140814254,\n        \"min\": 0.0,\n        \"max\": 24.4393,\n        \"num_unique_values\": 52,\n        \"samples\": [\n          0.0172,\n          0.8153,\n          0.4529\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Leptodora kindtii\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0004618663074588222,\n        \"min\": 0.0,\n        \"max\": 0.0042,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          0.0,\n          0.0013,\n          0.0009\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Acartia longiremis\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.9421629235346287,\n        \"min\": 0.0,\n        \"max\": 17.0945,\n        \"num_unique_values\": 75,\n        \"samples\": [\n          0.0129,\n          0.0039,\n          0.0062\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Acartia tonsa\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.7886650595478759,\n        \"min\": 0.0,\n        \"max\": 5.8227,\n        \"num_unique_values\": 78,\n        \"samples\": [\n          0.8503,\n          0.9298,\n          0.0167\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Eurytemora affinis\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5.378541856705618,\n        \"min\": 0.0,\n        \"max\": 39.0016,\n        \"num_unique_values\": 94,\n        \"samples\": [\n          3.9186,\n          9.1197,\n          0.0039\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Cyclops sp.\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.727436263237442,\n        \"min\": 0.0,\n        \"max\": 19.2179,\n        \"num_unique_values\": 77,\n        \"samples\": [\n          0.0153,\n          0.0669,\n          0.0661\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Nauplii Cyclopoida\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.1837391017877375,\n        \"min\": 0.0,\n        \"max\": 1.952,\n        \"num_unique_values\": 129,\n        \"samples\": [\n          0.0041,\n          0.34,\n          0.025\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Nauplii Calanoida\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.10275987254327935,\n        \"min\": 0.0,\n        \"max\": 0.7486,\n        \"num_unique_values\": 105,\n        \"samples\": [\n          0.0119,\n          0.0048,\n          0.0362\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Thermocyclops oithonoides\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.06548625469709043,\n        \"min\": 0.0,\n        \"max\": 0.4592,\n        \"num_unique_values\": 34,\n        \"samples\": [\n          0.4454,\n          0.0155,\n          0.0579\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Eurytemora lacustris\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.10746964993963784,\n        \"min\": 0.0,\n        \"max\": 0.6058,\n        \"num_unique_values\": 26,\n        \"samples\": [\n          0.0621,\n          0.2179,\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Basin\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":10}]},{"cell_type":"code","source":["x_train, x_test, y_train, y_test= train_test_split(x,y,test_size=0.25, random_state=2)"],"metadata":{"id":"SmyUKQi7UNRj","executionInfo":{"status":"ok","timestamp":1709738070270,"user_tz":-60,"elapsed":235,"user":{"displayName":"Paweł Leszczyński","userId":"09579002163402024035"}}},"execution_count":14,"outputs":[]},{"cell_type":"code","source":["lr_model=LogisticRegression(random_state=2)\n","lr_model.fit(x_train, y_train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":75},"id":"g0pTVXH9VK8L","executionInfo":{"status":"ok","timestamp":1709738144347,"user_tz":-60,"elapsed":282,"user":{"displayName":"Paweł Leszczyński","userId":"09579002163402024035"}},"outputId":"fc982a5a-79b9-4850-c5fc-8b20f5207088"},"execution_count":16,"outputs":[{"output_type":"execute_result","data":{"text/plain":["LogisticRegression(random_state=2)"],"text/html":["<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression(random_state=2)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LogisticRegression</label><div class=\"sk-toggleable__content\"><pre>LogisticRegression(random_state=2)</pre></div></div></div></div></div>"]},"metadata":{},"execution_count":16}]},{"cell_type":"code","source":["y_pred= lr_model.predict(x_test)"],"metadata":{"id":"pD3VhWOEVbsz","executionInfo":{"status":"ok","timestamp":1709738205913,"user_tz":-60,"elapsed":2,"user":{"displayName":"Paweł Leszczyński","userId":"09579002163402024035"}}},"execution_count":18,"outputs":[]},{"cell_type":"code","source":["cnf_matrix=metrics.confusion_matrix(y_test, y_pred)\n","cnf_matrix"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VeQXnBppV3_j","executionInfo":{"status":"ok","timestamp":1709738328808,"user_tz":-60,"elapsed":294,"user":{"displayName":"Paweł Leszczyński","userId":"09579002163402024035"}},"outputId":"90b66e95-d6e0-46b4-e0af-a7020b958f11"},"execution_count":21,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[24,  0],\n","       [ 8,  7]])"]},"metadata":{},"execution_count":21}]},{"cell_type":"code","source":["def matrix(matrix):\n","  class_names=[0,1]\n","  fig, ax= plt.subplots()\n","  tick_marks=np.arange(len(class_names))\n","  plt.xticks(tick_marks, class_names)\n","  plt.yticks(tick_marks, class_names)\n","  sns.heatmap(pd.DataFrame(matrix), annot=True, cmap=\"YlGnBu\", fmt='g')\n","  ax.xaxis.set_label_position(\"top\")\n","  plt.tight_layout()\n","  plt.ylabel('Actual label')\n","  plt.xlabel('Predicted label ')"],"metadata":{"id":"SZYFfmtxWMI8","executionInfo":{"status":"ok","timestamp":1709738780604,"user_tz":-60,"elapsed":273,"user":{"displayName":"Paweł Leszczyński","userId":"09579002163402024035"}}},"execution_count":29,"outputs":[]},{"cell_type":"code","source":["matrix(cnf_matrix)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":503},"id":"5F0IVKGFXo2r","executionInfo":{"status":"ok","timestamp":1709738783566,"user_tz":-60,"elapsed":2042,"user":{"displayName":"Paweł Leszczyński","userId":"09579002163402024035"}},"outputId":"47656ed0-54c0-4644-dab4-d8260ad36ffc"},"execution_count":30,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["print(classification_report(y_test, y_pred))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"w6tJ9YsfYDEL","executionInfo":{"status":"ok","timestamp":1709738886094,"user_tz":-60,"elapsed":249,"user":{"displayName":"Paweł Leszczyński","userId":"09579002163402024035"}},"outputId":"2d0c0890-8475-4647-bcff-100bb6759522"},"execution_count":32,"outputs":[{"output_type":"stream","name":"stdout","text":["              precision    recall  f1-score   support\n","\n","           0       0.75      1.00      0.86        24\n","           1       1.00      0.47      0.64        15\n","\n","    accuracy                           0.79        39\n","   macro avg       0.88      0.73      0.75        39\n","weighted avg       0.85      0.79      0.77        39\n","\n"]}]},{"cell_type":"markdown","source":[],"metadata":{"id":"FQCG8f2fZmGT"}},{"cell_type":"code","source":["y_pred_proba=lr_model.predict_proba(x_test)[::,1]\n","fpr, tpr, _= metrics.roc_curve(y_test, y_pred_proba)\n","auc=metrics.roc_auc_score(y_test, y_pred_proba)\n","plt.plot(fpr, tpr, label='data 1, auc='+str(auc))\n","plt.legend(loc=4)\n","plt.show"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":600},"id":"2uqGpvEzZT4j","executionInfo":{"status":"ok","timestamp":1709739653912,"user_tz":-60,"elapsed":513,"user":{"displayName":"Paweł Leszczyński","userId":"09579002163402024035"}},"outputId":"afd648ca-8de6-4d46-e9b0-ecf1c6fdacfc"},"execution_count":56,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<function matplotlib.pyplot.show(close=None, block=None)>"],"text/html":["<div style=\"max-width:800px; border: 1px solid var(--colab-border-color);\"><style>\n","      pre.function-repr-contents {\n","        overflow-x: auto;\n","        padding: 8px 12px;\n","        max-height: 500px;\n","      }\n","\n","      pre.function-repr-contents.function-repr-contents-collapsed {\n","        cursor: pointer;\n","        max-height: 100px;\n","      }\n","    </style>\n","    <pre style=\"white-space: initial; background:\n","         var(--colab-secondary-surface-color); padding: 8px 12px;\n","         border-bottom: 1px solid var(--colab-border-color);\"><b>matplotlib.pyplot.show</b><br/>def show(*args, **kwargs)</pre><pre class=\"function-repr-contents function-repr-contents-collapsed\" style=\"\"><a class=\"filepath\" style=\"display:none\" href=\"#\">/usr/local/lib/python3.10/dist-packages/matplotlib/pyplot.py</a>Display all open figures.\n","\n","Parameters\n","----------\n","block : bool, optional\n","    Whether to wait for all figures to be closed before returning.\n","\n","    If `True` block and run the GUI main loop until all figure windows\n","    are closed.\n","\n","    If `False` ensure that all figure windows are displayed and return\n","    immediately.  In this case, you are responsible for ensuring\n","    that the event loop is running to have responsive figures.\n","\n","    Defaults to True in non-interactive mode and to False in interactive\n","    mode (see `.pyplot.isinteractive`).\n","\n","See Also\n","--------\n","ion : Enable interactive mode, which shows / updates the figure after\n","      every plotting command, so that calling ``show()`` is not necessary.\n","ioff : Disable interactive mode.\n","savefig : Save the figure to an image file instead of showing it on screen.\n","\n","Notes\n","-----\n","**Saving figures to file and showing a window at the same time**\n","\n","If you want an image file as well as a user interface window, use\n","`.pyplot.savefig` before `.pyplot.show`. At the end of (a blocking)\n","``show()`` the figure is closed and thus unregistered from pyplot. Calling\n","`.pyplot.savefig` afterwards would save a new and thus empty figure. This\n","limitation of command order does not apply if the show is non-blocking or\n","if you keep a reference to the figure and use `.Figure.savefig`.\n","\n","**Auto-show in jupyter notebooks**\n","\n","The jupyter backends (activated via ``%matplotlib inline``,\n","``%matplotlib notebook``, or ``%matplotlib widget``), call ``show()`` at\n","the end of every cell by default. Thus, you usually don&#x27;t have to call it\n","explicitly there.</pre>\n","      <script>\n","      if (google.colab.kernel.accessAllowed && google.colab.files && google.colab.files.view) {\n","        for (const element of document.querySelectorAll('.filepath')) {\n","          element.style.display = 'block'\n","          element.onclick = (event) => {\n","            event.preventDefault();\n","            event.stopPropagation();\n","            google.colab.files.view(element.textContent, 401);\n","          };\n","        }\n","      }\n","      for (const element of document.querySelectorAll('.function-repr-contents')) {\n","        element.onclick = (event) => {\n","          event.preventDefault();\n","          event.stopPropagation();\n","          element.classList.toggle('function-repr-contents-collapsed');\n","        };\n","      }\n","      </script>\n","      </div>"]},"metadata":{},"execution_count":56},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["-------------drugi dataset--------------\n","\n","\n"],"metadata":{"id":"nG2mkj09Vs40"}},{"cell_type":"code","source":["df2=pd.read_csv('VLagun_Rotif_Basins.csv')"],"metadata":{"id":"Al7NiBO5YSwE","executionInfo":{"status":"ok","timestamp":1709738912583,"user_tz":-60,"elapsed":3,"user":{"displayName":"Paweł Leszczyński","userId":"09579002163402024035"}}},"execution_count":33,"outputs":[]},{"cell_type":"code","source":["x2=pd.get_dummies(df2)\n","x2.drop(['Basin'], inplace=True, axis=1)\n","y2=df['Basin']\n","df2.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":261},"id":"x66klALfYXCj","executionInfo":{"status":"ok","timestamp":1709738939243,"user_tz":-60,"elapsed":6,"user":{"displayName":"Paweł Leszczyński","userId":"09579002163402024035"}},"outputId":"a714e46c-d6b6-4c30-9eb2-88aa9441934c"},"execution_count":35,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   Anureopsis fissa  Ascomorpha saltans  Asplanchna priodonta  \\\n","0            0.0000              0.0068                0.0000   \n","1            0.0003              0.0000                0.0556   \n","2            0.0001              0.0000                0.0014   \n","3            0.0001              0.0000                0.0000   \n","4            0.0001              0.0000                0.0000   \n","\n","   Brachionus angularis  Brachionus calyciflorus calyciflorus  \\\n","0                0.0000                                0.0000   \n","1                0.0000                                0.0179   \n","2                0.0000                                0.0000   \n","3                0.0000                                0.0000   \n","4                0.0003                                0.0000   \n","\n","   Brachionus calyciflorus f.amphiceros  Brachionus calyciflorus spinosus  \\\n","0                                   0.0                               0.0   \n","1                                   0.0                               0.0   \n","2                                   0.0                               0.0   \n","3                                   0.0                               0.0   \n","4                                   0.0                               0.0   \n","\n","   Brachionus urceolaris  Brachionus calyciflorus f.anureiformis  \\\n","0                    0.0                                     0.0   \n","1                    0.0                                     0.0   \n","2                    0.0                                     0.0   \n","3                    0.0                                     0.0   \n","4                    0.0                                     0.0   \n","\n","   Filinia longiseta  Keratella cochlearis cochlearis  \\\n","0             1.3152                           0.8920   \n","1             0.0769                           0.0640   \n","2             0.0466                           0.0120   \n","3             0.0313                           0.0079   \n","4             0.0491                           0.0143   \n","\n","   Keratella cochlearis f.tecta  Keratella quadrata  Polyarthra vulgaris  \\\n","0                        0.2714              0.0000               0.0313   \n","1                        0.0464              0.0000               0.0111   \n","2                        0.0044              0.0000               0.0000   \n","3                        0.0040              0.0000               0.0000   \n","4                        0.0019              0.0026               0.0000   \n","\n","   Polyarthra platyptera  Pompholyx sp.  Synchaeta sp.  Trichocerca pusilla  \\\n","0                    0.0         0.0000         0.0000               0.0045   \n","1                    0.0         0.0000         0.0437               0.0041   \n","2                    0.0         0.0001         0.0000               0.0000   \n","3                    0.0         0.0000         0.0000               0.0000   \n","4                    0.0         0.0001         0.0000               0.0000   \n","\n","   Trichocerca similis  Basin  \n","0               0.0009      0  \n","1               0.0020      0  \n","2               0.0000      0  \n","3               0.0000      0  \n","4               0.0000      0  "],"text/html":["\n","  <div id=\"df-7b64e944-e4b1-4aef-8997-597d5e96d0ff\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Anureopsis fissa</th>\n","      <th>Ascomorpha saltans</th>\n","      <th>Asplanchna priodonta</th>\n","      <th>Brachionus angularis</th>\n","      <th>Brachionus calyciflorus calyciflorus</th>\n","      <th>Brachionus calyciflorus f.amphiceros</th>\n","      <th>Brachionus calyciflorus spinosus</th>\n","      <th>Brachionus urceolaris</th>\n","      <th>Brachionus calyciflorus f.anureiformis</th>\n","      <th>Filinia longiseta</th>\n","      <th>Keratella cochlearis cochlearis</th>\n","      <th>Keratella cochlearis f.tecta</th>\n","      <th>Keratella quadrata</th>\n","      <th>Polyarthra vulgaris</th>\n","      <th>Polyarthra platyptera</th>\n","      <th>Pompholyx sp.</th>\n","      <th>Synchaeta sp.</th>\n","      <th>Trichocerca pusilla</th>\n","      <th>Trichocerca similis</th>\n","      <th>Basin</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0.0000</td>\n","      <td>0.0068</td>\n","      <td>0.0000</td>\n","      <td>0.0000</td>\n","      <td>0.0000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.3152</td>\n","      <td>0.8920</td>\n","      <td>0.2714</td>\n","      <td>0.0000</td>\n","      <td>0.0313</td>\n","      <td>0.0</td>\n","      <td>0.0000</td>\n","      <td>0.0000</td>\n","      <td>0.0045</td>\n","      <td>0.0009</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0.0003</td>\n","      <td>0.0000</td>\n","      <td>0.0556</td>\n","      <td>0.0000</td>\n","      <td>0.0179</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0769</td>\n","      <td>0.0640</td>\n","      <td>0.0464</td>\n","      <td>0.0000</td>\n","      <td>0.0111</td>\n","      <td>0.0</td>\n","      <td>0.0000</td>\n","      <td>0.0437</td>\n","      <td>0.0041</td>\n","      <td>0.0020</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0.0001</td>\n","      <td>0.0000</td>\n","      <td>0.0014</td>\n","      <td>0.0000</td>\n","      <td>0.0000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0466</td>\n","      <td>0.0120</td>\n","      <td>0.0044</td>\n","      <td>0.0000</td>\n","      <td>0.0000</td>\n","      <td>0.0</td>\n","      <td>0.0001</td>\n","      <td>0.0000</td>\n","      <td>0.0000</td>\n","      <td>0.0000</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0.0001</td>\n","      <td>0.0000</td>\n","      <td>0.0000</td>\n","      <td>0.0000</td>\n","      <td>0.0000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0313</td>\n","      <td>0.0079</td>\n","      <td>0.0040</td>\n","      <td>0.0000</td>\n","      <td>0.0000</td>\n","      <td>0.0</td>\n","      <td>0.0000</td>\n","      <td>0.0000</td>\n","      <td>0.0000</td>\n","      <td>0.0000</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0.0001</td>\n","      <td>0.0000</td>\n","      <td>0.0000</td>\n","      <td>0.0003</td>\n","      <td>0.0000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0491</td>\n","      <td>0.0143</td>\n","      <td>0.0019</td>\n","      <td>0.0026</td>\n","      <td>0.0000</td>\n","      <td>0.0</td>\n","      <td>0.0001</td>\n","      <td>0.0000</td>\n","      <td>0.0000</td>\n","      <td>0.0000</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7b64e944-e4b1-4aef-8997-597d5e96d0ff')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-7b64e944-e4b1-4aef-8997-597d5e96d0ff button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-7b64e944-e4b1-4aef-8997-597d5e96d0ff');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-27dea079-1bfe-444a-8b99-1e1dab9a68d9\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-27dea079-1bfe-444a-8b99-1e1dab9a68d9')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-27dea079-1bfe-444a-8b99-1e1dab9a68d9 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df2","summary":"{\n  \"name\": \"df2\",\n  \"rows\": 155,\n  \"fields\": [\n    {\n      \"column\": \"Anureopsis fissa\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4.7227266981520097e-05,\n        \"min\": 0.0,\n        \"max\": 0.0004,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.0003,\n          0.0002,\n          0.0001\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Ascomorpha saltans\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0031126056932941418,\n        \"min\": 0.0,\n        \"max\": 0.0197,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          0.0183,\n          0.0032,\n          0.0068\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Asplanchna priodonta\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.04767937619262798,\n        \"min\": 0.0,\n        \"max\": 0.4763,\n        \"num_unique_values\": 34,\n        \"samples\": [\n          0.0037,\n          0.0089,\n          0.0025\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Brachionus angularis\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.06201479540885393,\n        \"min\": 0.0,\n        \"max\": 0.5516,\n        \"num_unique_values\": 55,\n        \"samples\": [\n          0.0131,\n          0.0255,\n          0.0004\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Brachionus calyciflorus calyciflorus\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.11456947984786338,\n        \"min\": 0.0,\n        \"max\": 0.8537,\n        \"num_unique_values\": 33,\n        \"samples\": [\n          0.0038,\n          0.0109,\n          0.0009\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Brachionus calyciflorus f.amphiceros\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.038002729126084905,\n        \"min\": 0.0,\n        \"max\": 0.3692,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          0.2261,\n          0.0329,\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Brachionus calyciflorus spinosus\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.002167267638179611,\n        \"min\": 0.0,\n        \"max\": 0.0179,\n        \"num_unique_values\": 11,\n        \"samples\": [\n          0.0051,\n          0.0,\n          0.0096\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Brachionus urceolaris\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.000942945051823421,\n        \"min\": 0.0,\n        \"max\": 0.0103,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          0.0,\n          0.0103,\n          0.0057\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Brachionus calyciflorus f.anureiformis\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.03248155911354296,\n        \"min\": 0.0,\n        \"max\": 0.3624,\n        \"num_unique_values\": 13,\n        \"samples\": [\n          0.0388,\n          0.0166,\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Filinia longiseta\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.2676429598499997,\n        \"min\": 0.0,\n        \"max\": 1.541,\n        \"num_unique_values\": 114,\n        \"samples\": [\n          0.0013,\n          0.0491,\n          0.0572\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Keratella cochlearis cochlearis\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.7718330936119787,\n        \"min\": 0.0,\n        \"max\": 5.3111,\n        \"num_unique_values\": 117,\n        \"samples\": [\n          0.0126,\n          0.0143,\n          0.0189\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Keratella cochlearis f.tecta\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.11424132697616586,\n        \"min\": 0.0,\n        \"max\": 1.2648,\n        \"num_unique_values\": 99,\n        \"samples\": [\n          0.0083,\n          0.01,\n          0.013\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Keratella quadrata\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0716848903522755,\n        \"min\": 0.0,\n        \"max\": 0.8038,\n        \"num_unique_values\": 47,\n        \"samples\": [\n          0.0921,\n          0.0068,\n          0.0159\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Polyarthra vulgaris\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.04916426055712658,\n        \"min\": 0.0,\n        \"max\": 0.4745,\n        \"num_unique_values\": 24,\n        \"samples\": [\n          0.087,\n          0.021,\n          0.0313\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Polyarthra platyptera\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.09225732451737995,\n        \"min\": 0.0,\n        \"max\": 0.8874,\n        \"num_unique_values\": 23,\n        \"samples\": [\n          0.0027,\n          0.0227,\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Pompholyx sp.\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.003224398632889364,\n        \"min\": 0.0,\n        \"max\": 0.0252,\n        \"num_unique_values\": 18,\n        \"samples\": [\n          0.0,\n          0.0001,\n          0.0039\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Synchaeta sp.\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.011232213496240897,\n        \"min\": 0.0,\n        \"max\": 0.1177,\n        \"num_unique_values\": 11,\n        \"samples\": [\n          0.0017,\n          0.0,\n          0.0241\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Trichocerca pusilla\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0020039178216545456,\n        \"min\": 0.0,\n        \"max\": 0.0132,\n        \"num_unique_values\": 24,\n        \"samples\": [\n          0.0028,\n          0.0069,\n          0.0045\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Trichocerca similis\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.002393457952822922,\n        \"min\": 0.0,\n        \"max\": 0.0186,\n        \"num_unique_values\": 19,\n        \"samples\": [\n          0.0009,\n          0.0186,\n          0.0103\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Basin\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":35}]},{"cell_type":"code","source":["x_train2, x_test2, y_train2, y_test2= train_test_split(x2,y2,test_size=0.25, random_state=2)"],"metadata":{"id":"bg13GB7XYhRc","executionInfo":{"status":"ok","timestamp":1709738980438,"user_tz":-60,"elapsed":240,"user":{"displayName":"Paweł Leszczyński","userId":"09579002163402024035"}}},"execution_count":36,"outputs":[]},{"cell_type":"code","source":["lr_model2=LogisticRegression(random_state=2)\n","lr_model2.fit(x_train2, y_train2)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":75},"id":"kKZPyhWXYoyb","executionInfo":{"status":"ok","timestamp":1709739011528,"user_tz":-60,"elapsed":242,"user":{"displayName":"Paweł Leszczyński","userId":"09579002163402024035"}},"outputId":"407d0ce8-da52-4f4a-bc48-2e5ed9551217"},"execution_count":38,"outputs":[{"output_type":"execute_result","data":{"text/plain":["LogisticRegression(random_state=2)"],"text/html":["<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression(random_state=2)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LogisticRegression</label><div class=\"sk-toggleable__content\"><pre>LogisticRegression(random_state=2)</pre></div></div></div></div></div>"]},"metadata":{},"execution_count":38}]},{"cell_type":"code","source":["y_pred2= lr_model2.predict(x_test2)"],"metadata":{"id":"d4uqk_ZeY1dq","executionInfo":{"status":"ok","timestamp":1709739048734,"user_tz":-60,"elapsed":2,"user":{"displayName":"Paweł Leszczyński","userId":"09579002163402024035"}}},"execution_count":39,"outputs":[]},{"cell_type":"code","source":["cnf_matrix2=metrics.confusion_matrix(y_test2, y_pred2)\n","cnf_matrix2"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zJFo8K8MY68i","executionInfo":{"status":"ok","timestamp":1709739070945,"user_tz":-60,"elapsed":259,"user":{"displayName":"Paweł Leszczyński","userId":"09579002163402024035"}},"outputId":"b8cf2bd0-4fe0-4285-c14a-27625abe4fcc"},"execution_count":40,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[23,  1],\n","       [12,  3]])"]},"metadata":{},"execution_count":40}]},{"cell_type":"code","source":["matrix(cnf_matrix2)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":503},"id":"8R1J4LGQY9yq","executionInfo":{"status":"ok","timestamp":1709739082402,"user_tz":-60,"elapsed":883,"user":{"displayName":"Paweł Leszczyński","userId":"09579002163402024035"}},"outputId":"8c125072-1d30-40ba-ffd9-aa95412411e2"},"execution_count":41,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["print(classification_report(y_test2, y_pred2))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RXfKSSEnZDDi","executionInfo":{"status":"ok","timestamp":1709739098948,"user_tz":-60,"elapsed":248,"user":{"displayName":"Paweł Leszczyński","userId":"09579002163402024035"}},"outputId":"9bb2238c-e59d-4525-c9c0-f72d5cd1247f"},"execution_count":42,"outputs":[{"output_type":"stream","name":"stdout","text":["              precision    recall  f1-score   support\n","\n","           0       0.66      0.96      0.78        24\n","           1       0.75      0.20      0.32        15\n","\n","    accuracy                           0.67        39\n","   macro avg       0.70      0.58      0.55        39\n","weighted avg       0.69      0.67      0.60        39\n","\n"]}]},{"cell_type":"code","source":["y_pred_proba2=lr_model2.predict_proba(x_test2)[::,1]\n","fpr2, tpr2, _= metrics.roc_curve(y_test2, y_pred_proba2)\n","auc2=metrics.roc_auc_score(y_test2, y_pred_proba2)\n","plt.plot(fpr, tpr, label='data 1, auc='+str(auc))\n","plt.legend(loc=4)\n","plt.show"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":600},"id":"AqwyatePbMpz","executionInfo":{"status":"ok","timestamp":1709739695209,"user_tz":-60,"elapsed":948,"user":{"displayName":"Paweł Leszczyński","userId":"09579002163402024035"}},"outputId":"5c8c7f59-f436-4286-d549-2eac7bb13f2f"},"execution_count":57,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<function matplotlib.pyplot.show(close=None, block=None)>"],"text/html":["<div style=\"max-width:800px; border: 1px solid var(--colab-border-color);\"><style>\n","      pre.function-repr-contents {\n","        overflow-x: auto;\n","        padding: 8px 12px;\n","        max-height: 500px;\n","      }\n","\n","      pre.function-repr-contents.function-repr-contents-collapsed {\n","        cursor: pointer;\n","        max-height: 100px;\n","      }\n","    </style>\n","    <pre style=\"white-space: initial; background:\n","         var(--colab-secondary-surface-color); padding: 8px 12px;\n","         border-bottom: 1px solid var(--colab-border-color);\"><b>matplotlib.pyplot.show</b><br/>def show(*args, **kwargs)</pre><pre class=\"function-repr-contents function-repr-contents-collapsed\" style=\"\"><a class=\"filepath\" style=\"display:none\" href=\"#\">/usr/local/lib/python3.10/dist-packages/matplotlib/pyplot.py</a>Display all open figures.\n","\n","Parameters\n","----------\n","block : bool, optional\n","    Whether to wait for all figures to be closed before returning.\n","\n","    If `True` block and run the GUI main loop until all figure windows\n","    are closed.\n","\n","    If `False` ensure that all figure windows are displayed and return\n","    immediately.  In this case, you are responsible for ensuring\n","    that the event loop is running to have responsive figures.\n","\n","    Defaults to True in non-interactive mode and to False in interactive\n","    mode (see `.pyplot.isinteractive`).\n","\n","See Also\n","--------\n","ion : Enable interactive mode, which shows / updates the figure after\n","      every plotting command, so that calling ``show()`` is not necessary.\n","ioff : Disable interactive mode.\n","savefig : Save the figure to an image file instead of showing it on screen.\n","\n","Notes\n","-----\n","**Saving figures to file and showing a window at the same time**\n","\n","If you want an image file as well as a user interface window, use\n","`.pyplot.savefig` before `.pyplot.show`. At the end of (a blocking)\n","``show()`` the figure is closed and thus unregistered from pyplot. Calling\n","`.pyplot.savefig` afterwards would save a new and thus empty figure. This\n","limitation of command order does not apply if the show is non-blocking or\n","if you keep a reference to the figure and use `.Figure.savefig`.\n","\n","**Auto-show in jupyter notebooks**\n","\n","The jupyter backends (activated via ``%matplotlib inline``,\n","``%matplotlib notebook``, or ``%matplotlib widget``), call ``show()`` at\n","the end of every cell by default. Thus, you usually don&#x27;t have to call it\n","explicitly there.</pre>\n","      <script>\n","      if (google.colab.kernel.accessAllowed && google.colab.files && google.colab.files.view) {\n","        for (const element of document.querySelectorAll('.filepath')) {\n","          element.style.display = 'block'\n","          element.onclick = (event) => {\n","            event.preventDefault();\n","            event.stopPropagation();\n","            google.colab.files.view(element.textContent, 401);\n","          };\n","        }\n","      }\n","      for (const element of document.querySelectorAll('.function-repr-contents')) {\n","        element.onclick = (event) => {\n","          event.preventDefault();\n","          event.stopPropagation();\n","          element.classList.toggle('function-repr-contents-collapsed');\n","        };\n","      }\n","      </script>\n","      </div>"]},"metadata":{},"execution_count":57},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]}]}