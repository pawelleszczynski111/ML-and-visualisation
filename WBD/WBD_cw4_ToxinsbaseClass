{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"14K1nHNfYjhX4TZAAyRYuc_E24wWLms9q","timestamp":1710848320397}],"authorship_tag":"ABX9TyPh2i3zYM4ozd9KV7dvrgSK"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","from matplotlib.colors import ListedColormap\n","\n","\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import StandardScaler\n","from sklearn.decomposition import PCA\n","\n","from sklearn.linear_model import LogisticRegression\n","\n","from sklearn.metrics import confusion_matrix\n","from sklearn.metrics import accuracy_score"],"metadata":{"id":"oyPz_LDeaoYQ","executionInfo":{"status":"ok","timestamp":1710848414927,"user_tz":-60,"elapsed":374,"user":{"displayName":"Paweł Leszczyński","userId":"09579002163402024035"}}},"execution_count":8,"outputs":[]},{"cell_type":"code","source":["df=pd.read_csv('ToxinsbaseClass.csv')\n","df.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZIeOmpdpavqw","executionInfo":{"status":"ok","timestamp":1710848415279,"user_tz":-60,"elapsed":3,"user":{"displayName":"Paweł Leszczyński","userId":"09579002163402024035"}},"outputId":"b5eb97fb-3088-4248-8e5f-60e91b0ea758"},"execution_count":9,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(137, 23)"]},"metadata":{},"execution_count":9}]},{"cell_type":"code","source":["df.head(5)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":290},"id":"Lp-ACYx6a5pO","executionInfo":{"status":"ok","timestamp":1710848415279,"user_tz":-60,"elapsed":3,"user":{"displayName":"Paweł Leszczyński","userId":"09579002163402024035"}},"outputId":"d3d7cb3e-3d7b-48a3-f9d9-d8c5879c3a48"},"execution_count":10,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   Latitude   Longitude   MaximumDepth   SecchiDepth   Sampling Depth   \\\n","0  46.673750    6.322253           18.0          1.05             10.5   \n","1  46.514161    6.773583           13.0          1.60              9.0   \n","2  46.354617    6.152489            3.5          3.50              3.0   \n","3  47.287447    8.211500           48.0          1.75             12.0   \n","4  46.638953    6.286464           32.0          4.00             11.0   \n","\n","   T_Surf   T_Epi   Zeu / Zmix  BuoyFreq   TP   ...  MC_dmRR   MC_RR   \\\n","0     22.5    21.1        0.21      0.01  0.02  ...     0.000     0.0   \n","1     20.4    19.3        0.50      0.01  0.09  ...     0.000     0.0   \n","2     26.0    25.9        2.00      0.00  0.12  ...     0.000     0.0   \n","3     23.9    19.4        0.52      0.01  0.02  ...     0.302     0.0   \n","4     21.5    19.7        0.91      0.01  0.07  ...     0.090     0.0   \n","\n","   MC_dmLR   MC_LR   CYN   ATX   ToxinRichness   TDI    TTC  Toxicity  \n","0     0.001   0.000   0.0   0.0              2  0.42  0.001         1  \n","1     0.003   0.004   0.0   0.0              3  1.05  0.009         1  \n","2     0.002   0.019   0.0   0.0              3  0.39  0.021         1  \n","3     0.290   0.005   0.0   0.0              4  1.00  0.668         2  \n","4     0.056   0.003   0.0   0.0              4  1.07  0.177         2  \n","\n","[5 rows x 23 columns]"],"text/html":["\n","  <div id=\"df-55b9f9ef-4a2a-48f1-a2db-19ec1c575d98\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Latitude</th>\n","      <th>Longitude</th>\n","      <th>MaximumDepth</th>\n","      <th>SecchiDepth</th>\n","      <th>Sampling Depth</th>\n","      <th>T_Surf</th>\n","      <th>T_Epi</th>\n","      <th>Zeu / Zmix</th>\n","      <th>BuoyFreq</th>\n","      <th>TP</th>\n","      <th>...</th>\n","      <th>MC_dmRR</th>\n","      <th>MC_RR</th>\n","      <th>MC_dmLR</th>\n","      <th>MC_LR</th>\n","      <th>CYN</th>\n","      <th>ATX</th>\n","      <th>ToxinRichness</th>\n","      <th>TDI</th>\n","      <th>TTC</th>\n","      <th>Toxicity</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>46.673750</td>\n","      <td>6.322253</td>\n","      <td>18.0</td>\n","      <td>1.05</td>\n","      <td>10.5</td>\n","      <td>22.5</td>\n","      <td>21.1</td>\n","      <td>0.21</td>\n","      <td>0.01</td>\n","      <td>0.02</td>\n","      <td>...</td>\n","      <td>0.000</td>\n","      <td>0.0</td>\n","      <td>0.001</td>\n","      <td>0.000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>2</td>\n","      <td>0.42</td>\n","      <td>0.001</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>46.514161</td>\n","      <td>6.773583</td>\n","      <td>13.0</td>\n","      <td>1.60</td>\n","      <td>9.0</td>\n","      <td>20.4</td>\n","      <td>19.3</td>\n","      <td>0.50</td>\n","      <td>0.01</td>\n","      <td>0.09</td>\n","      <td>...</td>\n","      <td>0.000</td>\n","      <td>0.0</td>\n","      <td>0.003</td>\n","      <td>0.004</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>3</td>\n","      <td>1.05</td>\n","      <td>0.009</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>46.354617</td>\n","      <td>6.152489</td>\n","      <td>3.5</td>\n","      <td>3.50</td>\n","      <td>3.0</td>\n","      <td>26.0</td>\n","      <td>25.9</td>\n","      <td>2.00</td>\n","      <td>0.00</td>\n","      <td>0.12</td>\n","      <td>...</td>\n","      <td>0.000</td>\n","      <td>0.0</td>\n","      <td>0.002</td>\n","      <td>0.019</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>3</td>\n","      <td>0.39</td>\n","      <td>0.021</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>47.287447</td>\n","      <td>8.211500</td>\n","      <td>48.0</td>\n","      <td>1.75</td>\n","      <td>12.0</td>\n","      <td>23.9</td>\n","      <td>19.4</td>\n","      <td>0.52</td>\n","      <td>0.01</td>\n","      <td>0.02</td>\n","      <td>...</td>\n","      <td>0.302</td>\n","      <td>0.0</td>\n","      <td>0.290</td>\n","      <td>0.005</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>4</td>\n","      <td>1.00</td>\n","      <td>0.668</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>46.638953</td>\n","      <td>6.286464</td>\n","      <td>32.0</td>\n","      <td>4.00</td>\n","      <td>11.0</td>\n","      <td>21.5</td>\n","      <td>19.7</td>\n","      <td>0.91</td>\n","      <td>0.01</td>\n","      <td>0.07</td>\n","      <td>...</td>\n","      <td>0.090</td>\n","      <td>0.0</td>\n","      <td>0.056</td>\n","      <td>0.003</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>4</td>\n","      <td>1.07</td>\n","      <td>0.177</td>\n","      <td>2</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 23 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-55b9f9ef-4a2a-48f1-a2db-19ec1c575d98')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-55b9f9ef-4a2a-48f1-a2db-19ec1c575d98 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-55b9f9ef-4a2a-48f1-a2db-19ec1c575d98');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-928c9c1e-429e-4864-b7be-fc8cc80300be\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-928c9c1e-429e-4864-b7be-fc8cc80300be')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-928c9c1e-429e-4864-b7be-fc8cc80300be button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df"}},"metadata":{},"execution_count":10}]},{"cell_type":"code","source":["df.describe()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":367},"id":"NP4IYOHGa7e0","executionInfo":{"status":"ok","timestamp":1710848415605,"user_tz":-60,"elapsed":328,"user":{"displayName":"Paweł Leszczyński","userId":"09579002163402024035"}},"outputId":"474db26a-1f6e-4692-91b5-746087b0eb9c"},"execution_count":11,"outputs":[{"output_type":"execute_result","data":{"text/plain":["        Latitude   Longitude   MaximumDepth   SecchiDepth   Sampling Depth   \\\n","count  137.000000  137.000000     137.000000    137.000000       137.000000   \n","mean    51.104677   14.813468      17.987591      1.486715         6.429927   \n","std      6.051893   10.720521      27.797015      1.258167         4.819238   \n","min     36.755550  -25.788917       1.000000      0.160000         0.700000   \n","25%     47.350792   10.983188       4.500000      0.650000         3.000000   \n","50%     52.413611   16.698806       9.000000      1.050000         5.000000   \n","75%     54.591528   21.592222      23.000000      1.800000         9.000000   \n","max     62.239189   32.832500     251.000000      6.200000        30.000000   \n","\n","          T_Surf       T_Epi   Zeu / Zmix    BuoyFreq         TP   ...  \\\n","count  137.000000  137.000000  137.000000  137.000000  137.000000  ...   \n","mean    22.183212   20.775912    0.987226    0.005693    0.088102  ...   \n","std      3.102930    3.143774    1.117894    0.006159    0.109649  ...   \n","min      9.000000    8.700000    0.040000    0.000000    0.010000  ...   \n","25%     20.300000   18.900000    0.350000    0.000000    0.030000  ...   \n","50%     22.000000   20.400000    0.550000    0.010000    0.060000  ...   \n","75%     23.900000   22.300000    1.230000    0.010000    0.090000  ...   \n","max     31.400000   31.200000    8.800000    0.030000    0.870000  ...   \n","\n","         MC_dmRR       MC_RR     MC_dmLR       MC_LR         CYN         ATX   \\\n","count  137.000000  137.000000  137.000000  137.000000  137.000000  137.000000   \n","mean     0.558226    0.205036    0.156095    0.199876    0.048482    0.028036   \n","std      1.903642    0.507328    0.513956    0.574369    0.209486    0.124335   \n","min      0.000000    0.000000    0.000000    0.000000    0.000000    0.000000   \n","25%      0.000000    0.000000    0.002000    0.000000    0.000000    0.000000   \n","50%      0.000000    0.000000    0.007000    0.017000    0.000000    0.000000   \n","75%      0.086000    0.119000    0.047000    0.098000    0.004000    0.004000   \n","max     14.892000    3.309000    3.166000    3.968000    2.007000    1.333000   \n","\n","       ToxinRichness         TDI         TTC    Toxicity  \n","count     137.000000  137.000000  137.000000  137.000000  \n","mean        3.941606    0.780657    1.350766    1.832117  \n","std         1.625922    0.394969    2.849080    0.800453  \n","min         1.000000    0.000000    0.000000    1.000000  \n","25%         3.000000    0.530000    0.033000    1.000000  \n","50%         4.000000    0.880000    0.189000    2.000000  \n","75%         5.000000    1.060000    0.901000    2.000000  \n","max         7.000000    1.440000   17.189000    3.000000  \n","\n","[8 rows x 23 columns]"],"text/html":["\n","  <div id=\"df-64e970c4-6e01-4a8c-9c1c-2fafd0e83ea1\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Latitude</th>\n","      <th>Longitude</th>\n","      <th>MaximumDepth</th>\n","      <th>SecchiDepth</th>\n","      <th>Sampling Depth</th>\n","      <th>T_Surf</th>\n","      <th>T_Epi</th>\n","      <th>Zeu / Zmix</th>\n","      <th>BuoyFreq</th>\n","      <th>TP</th>\n","      <th>...</th>\n","      <th>MC_dmRR</th>\n","      <th>MC_RR</th>\n","      <th>MC_dmLR</th>\n","      <th>MC_LR</th>\n","      <th>CYN</th>\n","      <th>ATX</th>\n","      <th>ToxinRichness</th>\n","      <th>TDI</th>\n","      <th>TTC</th>\n","      <th>Toxicity</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>137.000000</td>\n","      <td>137.000000</td>\n","      <td>137.000000</td>\n","      <td>137.000000</td>\n","      <td>137.000000</td>\n","      <td>137.000000</td>\n","      <td>137.000000</td>\n","      <td>137.000000</td>\n","      <td>137.000000</td>\n","      <td>137.000000</td>\n","      <td>...</td>\n","      <td>137.000000</td>\n","      <td>137.000000</td>\n","      <td>137.000000</td>\n","      <td>137.000000</td>\n","      <td>137.000000</td>\n","      <td>137.000000</td>\n","      <td>137.000000</td>\n","      <td>137.000000</td>\n","      <td>137.000000</td>\n","      <td>137.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>51.104677</td>\n","      <td>14.813468</td>\n","      <td>17.987591</td>\n","      <td>1.486715</td>\n","      <td>6.429927</td>\n","      <td>22.183212</td>\n","      <td>20.775912</td>\n","      <td>0.987226</td>\n","      <td>0.005693</td>\n","      <td>0.088102</td>\n","      <td>...</td>\n","      <td>0.558226</td>\n","      <td>0.205036</td>\n","      <td>0.156095</td>\n","      <td>0.199876</td>\n","      <td>0.048482</td>\n","      <td>0.028036</td>\n","      <td>3.941606</td>\n","      <td>0.780657</td>\n","      <td>1.350766</td>\n","      <td>1.832117</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>6.051893</td>\n","      <td>10.720521</td>\n","      <td>27.797015</td>\n","      <td>1.258167</td>\n","      <td>4.819238</td>\n","      <td>3.102930</td>\n","      <td>3.143774</td>\n","      <td>1.117894</td>\n","      <td>0.006159</td>\n","      <td>0.109649</td>\n","      <td>...</td>\n","      <td>1.903642</td>\n","      <td>0.507328</td>\n","      <td>0.513956</td>\n","      <td>0.574369</td>\n","      <td>0.209486</td>\n","      <td>0.124335</td>\n","      <td>1.625922</td>\n","      <td>0.394969</td>\n","      <td>2.849080</td>\n","      <td>0.800453</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>36.755550</td>\n","      <td>-25.788917</td>\n","      <td>1.000000</td>\n","      <td>0.160000</td>\n","      <td>0.700000</td>\n","      <td>9.000000</td>\n","      <td>8.700000</td>\n","      <td>0.040000</td>\n","      <td>0.000000</td>\n","      <td>0.010000</td>\n","      <td>...</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>1.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>1.000000</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>47.350792</td>\n","      <td>10.983188</td>\n","      <td>4.500000</td>\n","      <td>0.650000</td>\n","      <td>3.000000</td>\n","      <td>20.300000</td>\n","      <td>18.900000</td>\n","      <td>0.350000</td>\n","      <td>0.000000</td>\n","      <td>0.030000</td>\n","      <td>...</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.002000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>3.000000</td>\n","      <td>0.530000</td>\n","      <td>0.033000</td>\n","      <td>1.000000</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>52.413611</td>\n","      <td>16.698806</td>\n","      <td>9.000000</td>\n","      <td>1.050000</td>\n","      <td>5.000000</td>\n","      <td>22.000000</td>\n","      <td>20.400000</td>\n","      <td>0.550000</td>\n","      <td>0.010000</td>\n","      <td>0.060000</td>\n","      <td>...</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.007000</td>\n","      <td>0.017000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>4.000000</td>\n","      <td>0.880000</td>\n","      <td>0.189000</td>\n","      <td>2.000000</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>54.591528</td>\n","      <td>21.592222</td>\n","      <td>23.000000</td>\n","      <td>1.800000</td>\n","      <td>9.000000</td>\n","      <td>23.900000</td>\n","      <td>22.300000</td>\n","      <td>1.230000</td>\n","      <td>0.010000</td>\n","      <td>0.090000</td>\n","      <td>...</td>\n","      <td>0.086000</td>\n","      <td>0.119000</td>\n","      <td>0.047000</td>\n","      <td>0.098000</td>\n","      <td>0.004000</td>\n","      <td>0.004000</td>\n","      <td>5.000000</td>\n","      <td>1.060000</td>\n","      <td>0.901000</td>\n","      <td>2.000000</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>62.239189</td>\n","      <td>32.832500</td>\n","      <td>251.000000</td>\n","      <td>6.200000</td>\n","      <td>30.000000</td>\n","      <td>31.400000</td>\n","      <td>31.200000</td>\n","      <td>8.800000</td>\n","      <td>0.030000</td>\n","      <td>0.870000</td>\n","      <td>...</td>\n","      <td>14.892000</td>\n","      <td>3.309000</td>\n","      <td>3.166000</td>\n","      <td>3.968000</td>\n","      <td>2.007000</td>\n","      <td>1.333000</td>\n","      <td>7.000000</td>\n","      <td>1.440000</td>\n","      <td>17.189000</td>\n","      <td>3.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>8 rows × 23 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-64e970c4-6e01-4a8c-9c1c-2fafd0e83ea1')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-64e970c4-6e01-4a8c-9c1c-2fafd0e83ea1 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-64e970c4-6e01-4a8c-9c1c-2fafd0e83ea1');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-24f7ceee-46da-46d2-b683-eb648683d1e3\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-24f7ceee-46da-46d2-b683-eb648683d1e3')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-24f7ceee-46da-46d2-b683-eb648683d1e3 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe"}},"metadata":{},"execution_count":11}]},{"cell_type":"code","source":["x=df.iloc[:,0:21].values\n","y=df.iloc[:,22].values"],"metadata":{"id":"gMuevupaa9LK","executionInfo":{"status":"ok","timestamp":1710848415605,"user_tz":-60,"elapsed":7,"user":{"displayName":"Paweł Leszczyński","userId":"09579002163402024035"}}},"execution_count":12,"outputs":[]},{"cell_type":"code","source":["x_train,x_test,y_train,y_test=train_test_split(x,y, test_size=0.2, random_state=0)"],"metadata":{"id":"zoHq-avxbgES","executionInfo":{"status":"ok","timestamp":1710848415605,"user_tz":-60,"elapsed":7,"user":{"displayName":"Paweł Leszczyński","userId":"09579002163402024035"}}},"execution_count":13,"outputs":[]},{"cell_type":"code","source":["sc_x=StandardScaler()\n","x_train= sc_x.fit_transform(x_train)\n","x_test= sc_x.fit_transform(x_test)"],"metadata":{"id":"QiZqY_FzbpSC","executionInfo":{"status":"ok","timestamp":1710848415605,"user_tz":-60,"elapsed":6,"user":{"displayName":"Paweł Leszczyński","userId":"09579002163402024035"}}},"execution_count":14,"outputs":[]},{"cell_type":"code","source":["pca=PCA(n_components=2)"],"metadata":{"id":"PTuX11nfcKS2","executionInfo":{"status":"ok","timestamp":1710848415606,"user_tz":-60,"elapsed":7,"user":{"displayName":"Paweł Leszczyński","userId":"09579002163402024035"}}},"execution_count":15,"outputs":[]},{"cell_type":"code","source":["x_train=pca.fit_transform(x_train)\n","x_test=pca.fit_transform(x_test)"],"metadata":{"id":"YhCkKCGOcNRK","executionInfo":{"status":"ok","timestamp":1710848415606,"user_tz":-60,"elapsed":7,"user":{"displayName":"Paweł Leszczyński","userId":"09579002163402024035"}}},"execution_count":16,"outputs":[]},{"cell_type":"code","source":["explained_varience= pca.explained_variance_ratio_\n","explained_varience"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"geKX73FpcW75","executionInfo":{"status":"ok","timestamp":1710848415606,"user_tz":-60,"elapsed":7,"user":{"displayName":"Paweł Leszczyński","userId":"09579002163402024035"}},"outputId":"18da3e92-b74d-4c04-83b7-28a7d1c41ce3"},"execution_count":17,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([0.26828268, 0.14918599])"]},"metadata":{},"execution_count":17}]},{"cell_type":"code","source":["lr_model=LogisticRegression(random_state=0)\n","lr_model.fit(x_train,y_train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":74},"id":"vPvClUw1cb38","executionInfo":{"status":"ok","timestamp":1710848415606,"user_tz":-60,"elapsed":6,"user":{"displayName":"Paweł Leszczyński","userId":"09579002163402024035"}},"outputId":"cf7cc743-43b6-408c-e1ef-a7ac967058fe"},"execution_count":18,"outputs":[{"output_type":"execute_result","data":{"text/plain":["LogisticRegression(random_state=0)"],"text/html":["<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression(random_state=0)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LogisticRegression</label><div class=\"sk-toggleable__content\"><pre>LogisticRegression(random_state=0)</pre></div></div></div></div></div>"]},"metadata":{},"execution_count":18}]},{"cell_type":"code","source":["y_pred=lr_model.predict(x_test)\n","y_pred"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"uVrSMafDcmMD","executionInfo":{"status":"ok","timestamp":1710848415606,"user_tz":-60,"elapsed":6,"user":{"displayName":"Paweł Leszczyński","userId":"09579002163402024035"}},"outputId":"6b269676-aceb-49c8-d6e8-764c2ed0fb04"},"execution_count":19,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([1, 1, 1, 3, 1, 1, 2, 1, 1, 1, 3, 1, 1, 3, 3, 1, 1, 3, 3, 3, 3, 2,\n","       3, 2, 2, 3, 1, 2])"]},"metadata":{},"execution_count":19}]},{"cell_type":"code","source":["conf_matrix= confusion_matrix(y_test,y_pred)\n","conf_matrix"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wiD4hA-Dcq_X","executionInfo":{"status":"ok","timestamp":1710848415606,"user_tz":-60,"elapsed":5,"user":{"displayName":"Paweł Leszczyński","userId":"09579002163402024035"}},"outputId":"8831da0b-b4c3-48d3-eefc-8c36a271f540"},"execution_count":20,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[9, 3, 0],\n","       [3, 2, 5],\n","       [1, 0, 5]])"]},"metadata":{},"execution_count":20}]},{"cell_type":"code","source":["accuracy= accuracy_score(y_test,y_pred)\n","accuracy"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"AlWrYvURdMjn","executionInfo":{"status":"ok","timestamp":1710848415606,"user_tz":-60,"elapsed":5,"user":{"displayName":"Paweł Leszczyński","userId":"09579002163402024035"}},"outputId":"380150e3-19cc-4b3e-ea71-ff3ef135010f"},"execution_count":21,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.5714285714285714"]},"metadata":{},"execution_count":21}]},{"cell_type":"code","source":["y_pred=lr_model.predict(x_train)\n","y_pred"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"sgWXCZaidSIr","executionInfo":{"status":"ok","timestamp":1710848415946,"user_tz":-60,"elapsed":344,"user":{"displayName":"Paweł Leszczyński","userId":"09579002163402024035"}},"outputId":"759ba21d-d373-4f62-80e9-a4323bc304f9"},"execution_count":22,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 3, 2, 1, 3, 3, 3, 1, 2, 2, 1, 3,\n","       2, 1, 1, 2, 3, 1, 1, 1, 1, 2, 1, 2, 1, 2, 3, 3, 1, 1, 1, 3, 1, 2,\n","       1, 1, 2, 3, 1, 1, 2, 1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 1, 1, 3, 2, 2,\n","       2, 3, 3, 2, 2, 2, 1, 2, 1, 1, 1, 2, 3, 3, 3, 1, 1, 1, 3, 3, 2, 2,\n","       2, 2, 1, 2, 1, 3, 2, 2, 3, 1, 2, 2, 2, 2, 1, 3, 1, 2, 3, 1, 1])"]},"metadata":{},"execution_count":22}]},{"cell_type":"code","source":["conf_matrix=confusion_matrix(y_train,y_pred)\n","conf_matrix"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"AB4MncY4dbDz","executionInfo":{"status":"ok","timestamp":1710848415946,"user_tz":-60,"elapsed":2,"user":{"displayName":"Paweł Leszczyński","userId":"09579002163402024035"}},"outputId":"6da9de9c-3c9a-40e6-d10d-dcf8f7dc411e"},"execution_count":23,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[38,  7,  0],\n","       [10, 22,  4],\n","       [ 1,  8, 19]])"]},"metadata":{},"execution_count":23}]},{"cell_type":"code","source":["accuracy= accuracy_score(y_train,y_pred)\n","accuracy"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"F4aOtHShdjiQ","executionInfo":{"status":"ok","timestamp":1710848415946,"user_tz":-60,"elapsed":1,"user":{"displayName":"Paweł Leszczyński","userId":"09579002163402024035"}},"outputId":"484a7ea5-0960-4524-9a00-40fdc6e059ec"},"execution_count":24,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.7247706422018348"]},"metadata":{},"execution_count":24}]},{"cell_type":"code","source":["x_set, y_set= x_test, y_test\n","x1,x2= np.meshgrid(np.arange(start= x_set[:,0].min()-1, stop=x_set[:,0].max()+1,step=0.01),\n","                   np.arange(start= x_set[:,0].min()-1, stop=x_set[:,0].max()+1,step=0.01))\n","plt.contourf(x1,x2,lr_model.predict(np.array([x1.ravel(),x2.ravel()]).T).reshape(x1.shape),\n","             alpha=0.75, cmap=ListedColormap(('red','green','blue')))\n","plt.xlim(x1.min(),x1.max())\n","plt.xlim(x2.min(),x2.max())\n","for i,j in enumerate(np.unique(y_set)):\n","  plt.scatter(x_set[y_set==j,0],x_set[y_set==j,1],\n","              c=ListedColormap(('red','green','blue'))(i),label=j)\n","\n","plt.title('Logistic Regression(Test set)')\n","plt.xlabel('PCA 1')\n","plt.ylabel('PCA 2')\n","plt.legend()\n","plt.show\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":696},"id":"ckfJAbL_doGP","executionInfo":{"status":"ok","timestamp":1710848417093,"user_tz":-60,"elapsed":1148,"user":{"displayName":"Paweł Leszczyński","userId":"09579002163402024035"}},"outputId":"2521794f-6ec0-4b6c-eddd-441ec308912a"},"execution_count":25,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-25-944e7fd457a0>:9: UserWarning: *c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n","  plt.scatter(x_set[y_set==j,0],x_set[y_set==j,1],\n"]},{"output_type":"execute_result","data":{"text/plain":["<function matplotlib.pyplot.show(close=None, block=None)>"],"text/html":["<div style=\"max-width:800px; border: 1px solid var(--colab-border-color);\"><style>\n","      pre.function-repr-contents {\n","        overflow-x: auto;\n","        padding: 8px 12px;\n","        max-height: 500px;\n","      }\n","\n","      pre.function-repr-contents.function-repr-contents-collapsed {\n","        cursor: pointer;\n","        max-height: 100px;\n","      }\n","    </style>\n","    <pre style=\"white-space: initial; background:\n","         var(--colab-secondary-surface-color); padding: 8px 12px;\n","         border-bottom: 1px solid var(--colab-border-color);\"><b>matplotlib.pyplot.show</b><br/>def show(*args, **kwargs)</pre><pre class=\"function-repr-contents function-repr-contents-collapsed\" style=\"\"><a class=\"filepath\" style=\"display:none\" href=\"#\">/usr/local/lib/python3.10/dist-packages/matplotlib/pyplot.py</a>Display all open figures.\n","\n","Parameters\n","----------\n","block : bool, optional\n","    Whether to wait for all figures to be closed before returning.\n","\n","    If `True` block and run the GUI main loop until all figure windows\n","    are closed.\n","\n","    If `False` ensure that all figure windows are displayed and return\n","    immediately.  In this case, you are responsible for ensuring\n","    that the event loop is running to have responsive figures.\n","\n","    Defaults to True in non-interactive mode and to False in interactive\n","    mode (see `.pyplot.isinteractive`).\n","\n","See Also\n","--------\n","ion : Enable interactive mode, which shows / updates the figure after\n","      every plotting command, so that calling ``show()`` is not necessary.\n","ioff : Disable interactive mode.\n","savefig : Save the figure to an image file instead of showing it on screen.\n","\n","Notes\n","-----\n","**Saving figures to file and showing a window at the same time**\n","\n","If you want an image file as well as a user interface window, use\n","`.pyplot.savefig` before `.pyplot.show`. At the end of (a blocking)\n","``show()`` the figure is closed and thus unregistered from pyplot. Calling\n","`.pyplot.savefig` afterwards would save a new and thus empty figure. This\n","limitation of command order does not apply if the show is non-blocking or\n","if you keep a reference to the figure and use `.Figure.savefig`.\n","\n","**Auto-show in jupyter notebooks**\n","\n","The jupyter backends (activated via ``%matplotlib inline``,\n","``%matplotlib notebook``, or ``%matplotlib widget``), call ``show()`` at\n","the end of every cell by default. Thus, you usually don&#x27;t have to call it\n","explicitly there.</pre>\n","      <script>\n","      if (google.colab.kernel.accessAllowed && google.colab.files && google.colab.files.view) {\n","        for (const element of document.querySelectorAll('.filepath')) {\n","          element.style.display = 'block'\n","          element.onclick = (event) => {\n","            event.preventDefault();\n","            event.stopPropagation();\n","            google.colab.files.view(element.textContent, 401);\n","          };\n","        }\n","      }\n","      for (const element of document.querySelectorAll('.function-repr-contents')) {\n","        element.onclick = (event) => {\n","          event.preventDefault();\n","          event.stopPropagation();\n","          element.classList.toggle('function-repr-contents-collapsed');\n","        };\n","      }\n","      </script>\n","      </div>"]},"metadata":{},"execution_count":25},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["x_set, y_set= x_train, y_train\n","x1,x2= np.meshgrid(np.arange(start= x_set[:,0].min()-1, stop=x_set[:,0].max()+1,step=0.01),\n","                   np.arange(start= x_set[:,0].min()-1, stop=x_set[:,0].max()+1,step=0.01))\n","plt.contourf(x1,x2,lr_model.predict(np.array([x1.ravel(),x2.ravel()]).T).reshape(x1.shape),\n","             alpha=0.75, cmap=ListedColormap(('red','green','blue')))\n","plt.xlim(x1.min(),x1.max())\n","plt.xlim(x2.min(),x2.max())\n","for i,j in enumerate(np.unique(y_set)):\n","  plt.scatter(x_set[y_set==j,0],x_set[y_set==j,1],\n","              c=ListedColormap(('red','green','blue'))(i),label=j)\n","\n","plt.title('Logistic Regression(Train set)')\n","plt.xlabel('PCA 1')\n","plt.ylabel('PCA 2')\n","plt.legend()\n","plt.show"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":696},"id":"eDSlNyRcgP7a","executionInfo":{"status":"ok","timestamp":1710848417555,"user_tz":-60,"elapsed":465,"user":{"displayName":"Paweł Leszczyński","userId":"09579002163402024035"}},"outputId":"cf746f0a-4b39-4c2e-e896-650de4d0da8f"},"execution_count":26,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-26-a14dfd1c7aa6>:9: UserWarning: *c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n","  plt.scatter(x_set[y_set==j,0],x_set[y_set==j,1],\n"]},{"output_type":"execute_result","data":{"text/plain":["<function matplotlib.pyplot.show(close=None, block=None)>"],"text/html":["<div style=\"max-width:800px; border: 1px solid var(--colab-border-color);\"><style>\n","      pre.function-repr-contents {\n","        overflow-x: auto;\n","        padding: 8px 12px;\n","        max-height: 500px;\n","      }\n","\n","      pre.function-repr-contents.function-repr-contents-collapsed {\n","        cursor: pointer;\n","        max-height: 100px;\n","      }\n","    </style>\n","    <pre style=\"white-space: initial; background:\n","         var(--colab-secondary-surface-color); padding: 8px 12px;\n","         border-bottom: 1px solid var(--colab-border-color);\"><b>matplotlib.pyplot.show</b><br/>def show(*args, **kwargs)</pre><pre class=\"function-repr-contents function-repr-contents-collapsed\" style=\"\"><a class=\"filepath\" style=\"display:none\" href=\"#\">/usr/local/lib/python3.10/dist-packages/matplotlib/pyplot.py</a>Display all open figures.\n","\n","Parameters\n","----------\n","block : bool, optional\n","    Whether to wait for all figures to be closed before returning.\n","\n","    If `True` block and run the GUI main loop until all figure windows\n","    are closed.\n","\n","    If `False` ensure that all figure windows are displayed and return\n","    immediately.  In this case, you are responsible for ensuring\n","    that the event loop is running to have responsive figures.\n","\n","    Defaults to True in non-interactive mode and to False in interactive\n","    mode (see `.pyplot.isinteractive`).\n","\n","See Also\n","--------\n","ion : Enable interactive mode, which shows / updates the figure after\n","      every plotting command, so that calling ``show()`` is not necessary.\n","ioff : Disable interactive mode.\n","savefig : Save the figure to an image file instead of showing it on screen.\n","\n","Notes\n","-----\n","**Saving figures to file and showing a window at the same time**\n","\n","If you want an image file as well as a user interface window, use\n","`.pyplot.savefig` before `.pyplot.show`. At the end of (a blocking)\n","``show()`` the figure is closed and thus unregistered from pyplot. Calling\n","`.pyplot.savefig` afterwards would save a new and thus empty figure. This\n","limitation of command order does not apply if the show is non-blocking or\n","if you keep a reference to the figure and use `.Figure.savefig`.\n","\n","**Auto-show in jupyter notebooks**\n","\n","The jupyter backends (activated via ``%matplotlib inline``,\n","``%matplotlib notebook``, or ``%matplotlib widget``), call ``show()`` at\n","the end of every cell by default. Thus, you usually don&#x27;t have to call it\n","explicitly there.</pre>\n","      <script>\n","      if (google.colab.kernel.accessAllowed && google.colab.files && google.colab.files.view) {\n","        for (const element of document.querySelectorAll('.filepath')) {\n","          element.style.display = 'block'\n","          element.onclick = (event) => {\n","            event.preventDefault();\n","            event.stopPropagation();\n","            google.colab.files.view(element.textContent, 401);\n","          };\n","        }\n","      }\n","      for (const element of document.querySelectorAll('.function-repr-contents')) {\n","        element.onclick = (event) => {\n","          event.preventDefault();\n","          event.stopPropagation();\n","          element.classList.toggle('function-repr-contents-collapsed');\n","        };\n","      }\n","      </script>\n","      </div>"]},"metadata":{},"execution_count":26},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]}]}