{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNWb8N47zTzo8Z1GXKz2lrO"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["from d3blocks import D3Blocks"],"metadata":{"id":"qfdIn0fhA-1n","executionInfo":{"status":"ok","timestamp":1717317272875,"user_tz":-120,"elapsed":224,"user":{"displayName":"Paweł Leszczyński","userId":"09579002163402024035"}}},"execution_count":4,"outputs":[]},{"cell_type":"code","source":["d3=D3Blocks()\n","\n","df= d3.import_example('energy')\n","\n","d3.sankey(df,link={\"color\": \"source-target\"})"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XrWyMjLHCbI5","executionInfo":{"status":"ok","timestamp":1717317349511,"user_tz":-120,"elapsed":918,"user":{"displayName":"Paweł Leszczyński","userId":"09579002163402024035"}},"outputId":"726d4d20-6a2c-45da-ff09-a727994bd5fd"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stderr","text":["[d3blocks] >INFO> Cleaning edge_properties and config parameters..\n","[d3blocks] >INFO> Import dataset [energy]\n","[d3blocks] >INFO> Cleaning edge_properties and config parameters..\n","[d3blocks] >INFO> Initializing [Sankey]\n","[d3blocks] >INFO> filepath is set to [/tmp/d3blocks/sankey.html]\n","[d3blocks] >INFO> Convert to DataFrame.\n","[d3blocks] >INFO> Node properties are set.\n","[d3blocks] >INFO> Edge properties are set.\n","[d3blocks] >INFO> File already exists and will be overwritten: [/tmp/d3blocks/sankey.html]\n","[d3blocks] >INFO> Open browser: /tmp/d3blocks/sankey.html\n"]}]},{"cell_type":"code","source":["d3.d3graph(df, showfig=False)\n","d3.D3graph.set_node_properties(color='cluster')\n","\n","d3.D3graph.node_properties['Thermal_generation']['size']=20\n","d3.D3graph.node_properties['Thermal_generation']['edge_color']='#000fff'\n","d3.D3graph.node_properties['Thermal_generation']['edge_size']=3\n","\n","d3.D3graph.edge_properties['Solar', 'Solar_Thermal']['color']='#000fff'\n","d3.D3graph.edge_properties['Solar', 'Solar_Thermal']['wight_scaled']=10\n","\n","d3.D3graph.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QmCtUIt3H4sq","executionInfo":{"status":"ok","timestamp":1717318143714,"user_tz":-120,"elapsed":1244,"user":{"displayName":"Paweł Leszczyński","userId":"09579002163402024035"}},"outputId":"559d7ec9-d7c9-404a-ad3f-430bb26bd6ce"},"execution_count":14,"outputs":[{"output_type":"stream","name":"stderr","text":["[d3blocks] >INFO> Converting source-target into adjacency matrix..\n","[d3blocks] >INFO> Making the matrix symmetric..\n","[d3blocks] >INFO> Set directed=True to see the markers!\n","[d3blocks] >INFO> Keep only edges with weight>0\n","[d3blocks] >INFO> Converting source-target into adjacency matrix..\n","[d3blocks] >INFO> Making the matrix symmetric..\n","[d3blocks] >INFO> Converting adjacency matrix into source-target..\n","[d3blocks] >INFO> Number of unique nodes: 48\n","[d3blocks] >INFO> Slider range is set to [0, 840]\n","[d3blocks] >INFO> Write to path: [/tmp/tmp5p2j_zkh/d3graph.html]\n","[d3blocks] >INFO> File already exists and will be overwritten: [/tmp/tmp5p2j_zkh/d3graph.html]\n","[d3blocks] >INFO> Converting adjacency matrix into source-target..\n","[d3blocks] >INFO> Number of unique nodes: 48\n","[d3blocks] >INFO> Slider range is set to [0, 840]\n","[d3blocks] >INFO> Write to path: [/tmp/tmpiupmw4su/d3graph.html]\n","[d3blocks] >INFO> File already exists and will be overwritten: [/tmp/tmpiupmw4su/d3graph.html]\n"]}]},{"cell_type":"code","source":["d3.chord(df, filepath='chord_demo.html')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8oIGZ47_C0_0","executionInfo":{"status":"ok","timestamp":1717317274197,"user_tz":-120,"elapsed":365,"user":{"displayName":"Paweł Leszczyński","userId":"09579002163402024035"}},"outputId":"e9a13ff6-9f34-412e-d27f-c85aaed97526"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stderr","text":["[d3blocks] >INFO> Cleaning edge_properties and config parameters..\n","[d3blocks] >INFO> Initializing [Chord]\n","[d3blocks] >INFO> filepath is set to [/tmp/d3blocks/chord_demo.html]\n","[d3blocks] >INFO> Convert to DataFrame.\n","[d3blocks] >INFO> Node properties are set.\n","[d3blocks] >INFO> Set edge-opacity based on the [source] node-opacity.\n","[d3blocks] >INFO> Set edge-colors based on the [source] node-color.\n","[d3blocks] >INFO> Edge properties are set.\n","[d3blocks] >INFO> Open browser: /tmp/d3blocks/chord_demo.html\n"]}]},{"cell_type":"markdown","source":[],"metadata":{"id":"DyLiCKd8GEVB"}},{"cell_type":"code","source":["df.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"wqu3wrwzDEQF","executionInfo":{"status":"ok","timestamp":1717317274197,"user_tz":-120,"elapsed":7,"user":{"displayName":"Paweł Leszczyński","userId":"09579002163402024035"}},"outputId":"9971cb08-c6e0-44ee-c31b-7b7f5048fbd5"},"execution_count":7,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                 source          target   weight\n","0  Agricultural 'waste'  Bio-conversion  124.729\n","1        Bio-conversion          Liquid    0.597\n","2        Bio-conversion          Losses   26.862\n","3        Bio-conversion           Solid  280.322\n","4        Bio-conversion             Gas   81.144"],"text/html":["\n","  <div id=\"df-4a5d7cba-2738-4ed0-9c8f-f889cd2f08bd\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>source</th>\n","      <th>target</th>\n","      <th>weight</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Agricultural 'waste'</td>\n","      <td>Bio-conversion</td>\n","      <td>124.729</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Bio-conversion</td>\n","      <td>Liquid</td>\n","      <td>0.597</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Bio-conversion</td>\n","      <td>Losses</td>\n","      <td>26.862</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Bio-conversion</td>\n","      <td>Solid</td>\n","      <td>280.322</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Bio-conversion</td>\n","      <td>Gas</td>\n","      <td>81.144</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4a5d7cba-2738-4ed0-9c8f-f889cd2f08bd')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-4a5d7cba-2738-4ed0-9c8f-f889cd2f08bd button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-4a5d7cba-2738-4ed0-9c8f-f889cd2f08bd');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-69e26bfd-6e4c-4c3f-bd2f-83ab8b7fcfa7\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-69e26bfd-6e4c-4c3f-bd2f-83ab8b7fcfa7')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-69e26bfd-6e4c-4c3f-bd2f-83ab8b7fcfa7 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df","summary":"{\n  \"name\": \"df\",\n  \"rows\": 68,\n  \"fields\": [\n    {\n      \"column\": \"source\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 34,\n        \"samples\": [\n          \"Hydro\",\n          \"Nuclear\",\n          \"Solar\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"target\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 28,\n        \"samples\": [\n          \"Over generation / exports\",\n          \"Solar Thermal\",\n          \"Heating and cooling - homes\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"weight\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 177.22523655734733,\n        \"min\": 0.129,\n        \"max\": 839.978,\n        \"num_unique_values\": 64,\n        \"samples\": [\n          59.901,\n          787.129,\n          124.729\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":7}]},{"cell_type":"code","source":["df2= d3.import_example('random_time', n=10000, c=500, date_start='1-1-2000 00:10:05', date_stop='1-1-2001 23:59:59')"],"metadata":{"id":"BrpJPsgkDVAW","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1717317685106,"user_tz":-120,"elapsed":8347,"user":{"displayName":"Paweł Leszczyński","userId":"09579002163402024035"}},"outputId":"5c237dfc-c5db-41ee-83cb-a613456c60b8"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/d3blocks/movingbubbles/Movingbubbles.py:584: UserWarning: Parsing dates in %d-%m-%Y %H:%M:%S format when dayfirst=False (the default) was specified. Pass `dayfirst=True` or specify a format to silence this warning.\n","  df['datetime'] = pd.to_datetime(df['datetime'])\n"]}]},{"cell_type":"code","source":["df2.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"IW7sV-l6G29S","executionInfo":{"status":"ok","timestamp":1717317695135,"user_tz":-120,"elapsed":7,"user":{"displayName":"Paweł Leszczyński","userId":"09579002163402024035"}},"outputId":"5c422913-10f4-424f-ce36-a612bed3a519"},"execution_count":11,"outputs":[{"output_type":"execute_result","data":{"text/plain":["             datetime sample_id     state\n","0 2000-01-01 00:20:06       442      Sick\n","1 2000-01-01 02:22:22        17  Sleeping\n","2 2000-01-01 11:29:46       134      Sick\n","3 2000-01-01 13:48:57       493      Sick\n","4 2000-01-01 14:27:12        79  Sleeping"],"text/html":["\n","  <div id=\"df-7fbfe3a6-df9d-4257-9b70-35debbba524c\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>datetime</th>\n","      <th>sample_id</th>\n","      <th>state</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2000-01-01 00:20:06</td>\n","      <td>442</td>\n","      <td>Sick</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2000-01-01 02:22:22</td>\n","      <td>17</td>\n","      <td>Sleeping</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2000-01-01 11:29:46</td>\n","      <td>134</td>\n","      <td>Sick</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2000-01-01 13:48:57</td>\n","      <td>493</td>\n","      <td>Sick</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2000-01-01 14:27:12</td>\n","      <td>79</td>\n","      <td>Sleeping</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7fbfe3a6-df9d-4257-9b70-35debbba524c')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-7fbfe3a6-df9d-4257-9b70-35debbba524c button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-7fbfe3a6-df9d-4257-9b70-35debbba524c');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-bd29022b-1433-4656-86b7-9591c3cb9c93\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-bd29022b-1433-4656-86b7-9591c3cb9c93')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-bd29022b-1433-4656-86b7-9591c3cb9c93 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df2","summary":"{\n  \"name\": \"df2\",\n  \"rows\": 9999,\n  \"fields\": [\n    {\n      \"column\": \"datetime\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2000-01-01 00:20:06\",\n        \"max\": \"2001-01-01 23:55:28\",\n        \"num_unique_values\": 9996,\n        \"samples\": [\n          \"2000-04-11 07:51:45\",\n          \"2000-09-29 11:49:19\",\n          \"2000-12-27 11:36:13\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sample_id\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": 0,\n        \"max\": 500,\n        \"num_unique_values\": 500,\n        \"samples\": [\n          206,\n          499,\n          39\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"state\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 10,\n        \"samples\": [\n          \"Eating\",\n          \"Sleeping\",\n          \"Travel\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":11}]},{"cell_type":"code","source":["d3.movingbubbles(df2, datetime='datetime', state='state', sample_id='sample_id', standardize=None, speed={\"slow\": 1000, \"medium\": 200, \"fast\": 10}, cmap='Set1', filepath='movingbubbles.html')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"sGF-CdfdHHSL","executionInfo":{"status":"ok","timestamp":1717317852372,"user_tz":-120,"elapsed":1925,"user":{"displayName":"Paweł Leszczyński","userId":"09579002163402024035"}},"outputId":"5783f877-55d0-4288-8093-11ed055b28bd"},"execution_count":12,"outputs":[{"output_type":"stream","name":"stderr","text":["[d3blocks] >INFO> Cleaning edge_properties and config parameters..\n","[d3blocks] >INFO> Initializing [Movingbubbles]\n","[d3blocks] >INFO> filepath is set to [/tmp/d3blocks/movingbubbles.html]\n","[d3blocks] >INFO> Convert to DataFrame.\n","[d3blocks] >INFO> Node properties are set.\n","[d3blocks] >INFO> Standardizing input dataframe using method: [None].\n","[d3blocks] >INFO> Set all nodes to size: 5\n","[clustimage] >WARNING> Colormap [Set1] can not create [500] unique colors! Available unique colors: [9].\n","[d3blocks] >WARNING> Colormap [Set1] can not create [500] unique colors! Available unique colors: [9].\n","[d3blocks] >INFO> Edge properties are set.\n","[d3blocks] >INFO> Open browser: /tmp/d3blocks/movingbubbles.html\n"]}]},{"cell_type":"code","source":["df3= d3.import_example('climate')\n","\n","d3.timeseries(df3, datetime='date', dt_format='%Y-%m-%d', fontsize=10)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"N2vtIhwPHtMn","executionInfo":{"status":"ok","timestamp":1717318437982,"user_tz":-120,"elapsed":1437,"user":{"displayName":"Paweł Leszczyński","userId":"09579002163402024035"}},"outputId":"930941e9-5c55-4d8a-a79f-a8f0e6133496"},"execution_count":23,"outputs":[{"output_type":"stream","name":"stderr","text":["[d3blocks] >INFO> Extracting files..\n","[d3blocks] >INFO> Import dataset: [climate]\n","[d3blocks] >INFO> Initializing [Timeseries]\n","[d3blocks] >INFO> filepath is set to [/tmp/d3blocks/timeseries.html]\n","[d3blocks] >INFO> Convert to DataFrame.\n","[d3blocks] >INFO> Node properties are set.\n","[d3blocks] >INFO> Edge properties are set.\n","[d3blocks] >INFO> Open browser: /tmp/d3blocks/timeseries.html\n"]}]},{"cell_type":"code","source":["\n","img_before, img_after= d3.import_example('unsplash')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":304},"id":"PMm7HeVeKV6s","executionInfo":{"status":"error","timestamp":1717319607739,"user_tz":-120,"elapsed":218,"user":{"displayName":"Paweł Leszczyński","userId":"09579002163402024035"}},"outputId":"32f72f5a-a976-4a7e-f843-80d199a4a9d2"},"execution_count":46,"outputs":[{"output_type":"stream","name":"stderr","text":["[d3blocks] >INFO> Import dataset [unsplash]\n"]},{"output_type":"error","ename":"BadZipFile","evalue":"File is not a zip file","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mBadZipFile\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-46-7169e8e50c25>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mimg_before\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mimg_after\u001b[0m\u001b[0;34m=\u001b[0m \u001b[0md3\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mimport_example\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'unsplash'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/d3blocks/d3blocks.py\u001b[0m in \u001b[0;36mimport_example\u001b[0;34m(self, data, n, c, date_start, date_stop, overwrite)\u001b[0m\n\u001b[1;32m   3080\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0m_import_example\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mn\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mn\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mc\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdate_start\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdate_start\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdate_stop\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdate_stop\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdt_format\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'%d-%m-%Y %H:%M:%S'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlogger\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlogger\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3081\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3082\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mdz\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mverbose\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mget_logger\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0moverwrite\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0moverwrite\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3083\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3084\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/datazets/datazets.py\u001b[0m in \u001b[0;36mget\u001b[0;34m(data, url, sep, verbose, overwrite, **args)\u001b[0m\n\u001b[1;32m    156\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    157\u001b[0m         \u001b[0mPATH_TO_DATA\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdownload_from_url\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdataproperties\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'filename'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0murl\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdataproperties\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'url'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 158\u001b[0;31m         \u001b[0mdf\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread_csv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mPATH_TO_DATA\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msep\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdataproperties\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'sep'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    159\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    160\u001b[0m     \u001b[0mdf\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_set_dtypes\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdataproperties\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36mread_csv\u001b[0;34m(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, skipfooter, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, date_format, dayfirst, cache_dates, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, doublequote, escapechar, comment, encoding, encoding_errors, dialect, on_bad_lines, delim_whitespace, low_memory, memory_map, float_precision, storage_options, dtype_backend)\u001b[0m\n\u001b[1;32m    910\u001b[0m     \u001b[0mkwds\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkwds_defaults\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    911\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 912\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0m_read\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    913\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    914\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m_read\u001b[0;34m(filepath_or_buffer, kwds)\u001b[0m\n\u001b[1;32m    575\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    576\u001b[0m     \u001b[0;31m# Create the parser.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 577\u001b[0;31m     \u001b[0mparser\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mTextFileReader\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    578\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    579\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mchunksize\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0miterator\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, f, engine, **kwds)\u001b[0m\n\u001b[1;32m   1405\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1406\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhandles\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mIOHandles\u001b[0m \u001b[0;34m|\u001b[0m \u001b[0;32mNone\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1407\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_make_engine\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mengine\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1408\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1409\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mclose\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m_make_engine\u001b[0;34m(self, f, engine)\u001b[0m\n\u001b[1;32m   1659\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0;34m\"b\"\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mmode\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1660\u001b[0m                     \u001b[0mmode\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;34m\"b\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1661\u001b[0;31m             self.handles = get_handle(\n\u001b[0m\u001b[1;32m   1662\u001b[0m                 \u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1663\u001b[0m                 \u001b[0mmode\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/io/common.py\u001b[0m in \u001b[0;36mget_handle\u001b[0;34m(path_or_buf, mode, encoding, compression, memory_map, is_text, errors, storage_options)\u001b[0m\n\u001b[1;32m    780\u001b[0m             \u001b[0;31m# \"Union[str, BaseBuffer]\"; expected \"Union[Union[str, PathLike[str]],\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    781\u001b[0m             \u001b[0;31m# ReadBuffer[bytes], WriteBuffer[bytes]]\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 782\u001b[0;31m             handle = _BytesZipFile(\n\u001b[0m\u001b[1;32m    783\u001b[0m                 \u001b[0mhandle\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mioargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmode\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mcompression_args\u001b[0m  \u001b[0;31m# type: ignore[arg-type]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    784\u001b[0m             )\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/io/common.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, file, mode, archive_name, **kwargs)\u001b[0m\n\u001b[1;32m   1023\u001b[0m         \u001b[0;31m# Union[str, PathLike[str]], ReadBuffer[bytes], WriteBuffer[bytes]]\";\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1024\u001b[0m         \u001b[0;31m# expected \"Union[Union[str, PathLike[str]], IO[bytes]]\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1025\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbuffer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mzipfile\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mZipFile\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfile\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmode\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# type: ignore[arg-type]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1026\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1027\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0minfer_filename\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0mstr\u001b[0m \u001b[0;34m|\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.10/zipfile.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, file, mode, compression, allowZip64, compresslevel, strict_timestamps)\u001b[0m\n\u001b[1;32m   1267\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1268\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mmode\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m'r'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1269\u001b[0;31m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_RealGetContents\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1270\u001b[0m             \u001b[0;32melif\u001b[0m \u001b[0mmode\u001b[0m \u001b[0;32min\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;34m'w'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'x'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1271\u001b[0m                 \u001b[0;31m# set the modified flag so central directory gets written\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.10/zipfile.py\u001b[0m in \u001b[0;36m_RealGetContents\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   1334\u001b[0m             \u001b[0;32mraise\u001b[0m \u001b[0mBadZipFile\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"File is not a zip file\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1335\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mendrec\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1336\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mBadZipFile\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"File is not a zip file\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1337\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdebug\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1338\u001b[0m             \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mendrec\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mBadZipFile\u001b[0m: File is not a zip file"]}]},{"cell_type":"code","source":["df4=d3.import_example('cancer')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"U6B_FBHkK5WW","executionInfo":{"status":"ok","timestamp":1717319527199,"user_tz":-120,"elapsed":233,"user":{"displayName":"Paweł Leszczyński","userId":"09579002163402024035"}},"outputId":"dd578b5a-b0e7-447b-d410-939be355947d"},"execution_count":42,"outputs":[{"output_type":"stream","name":"stderr","text":["[d3blocks] >INFO> Import dataset [cancer]\n"]}]},{"cell_type":"code","source":["print(df4.columns)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"PNnBz19QNFal","executionInfo":{"status":"ok","timestamp":1717319532108,"user_tz":-120,"elapsed":209,"user":{"displayName":"Paweł Leszczyński","userId":"09579002163402024035"}},"outputId":"027986cf-3cff-432b-9c4f-bf3e4a643f3b"},"execution_count":43,"outputs":[{"output_type":"stream","name":"stdout","text":["Index(['tsneX', 'tsneY', 'age', 'sex', 'survival_months', 'death_indicator',\n","       'labx', 'PC1', 'PC2'],\n","      dtype='object')\n"]}]},{"cell_type":"code","source":["tooltip=df4['labx'].values + '<br /> Survival: '+ df4['survival_months'].astype(str).str[0:4].values\n","\n","size=df4['survival_months'].fillna(1).values/10"],"metadata":{"id":"NRE4IDZZLL79","executionInfo":{"status":"ok","timestamp":1717319283380,"user_tz":-120,"elapsed":219,"user":{"displayName":"Paweł Leszczyński","userId":"09579002163402024035"}}},"execution_count":39,"outputs":[]},{"cell_type":"code","source":["d3.scatter(df4['tsneX'].values,\n","           df4['tsneY'].values,\n","           x1=df4['PC1'].values,\n","           y1=df4['PC2'].values,\n","           scale=True,\n","           label_radio=['tSNE', 'PCA'],\n","           size=size,\n","           color=df4['labx'].values,\n","           stroke='#000000',\n","           opacity=0.4,\n","           tooltip=tooltip,\n","           cmap='tab20'\n","           )"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Uwf3ZfPGLphr","executionInfo":{"status":"ok","timestamp":1717319568367,"user_tz":-120,"elapsed":1297,"user":{"displayName":"Paweł Leszczyński","userId":"09579002163402024035"}},"outputId":"1fd93fb9-95dc-4057-ba24-fa5242bd4a51"},"execution_count":44,"outputs":[{"output_type":"stream","name":"stderr","text":["[d3blocks] >INFO> Cleaning edge_properties and config parameters..\n","[d3blocks] >INFO> Initializing [Scatter]\n","[d3blocks] >INFO> filepath is set to [/tmp/d3blocks/scatter.html]\n","[d3blocks] >INFO> Scaling xy-coordinates.\n","[d3blocks] >INFO> [12] sizes are <0 and set to 0.\n","[d3blocks] >INFO> Set opacity based on the data density.\n","[d3blocks] >INFO> Edge properties are set.\n","[d3blocks] >INFO> Open browser: /tmp/d3blocks/scatter.html\n"]}]},{"cell_type":"code","source":["tooltip=df4['labx'].values + '<br /> Survival: '+ df4['survival_months'].astype(str).values\n"],"metadata":{"id":"J61nPaExN625","executionInfo":{"status":"ok","timestamp":1717319711633,"user_tz":-120,"elapsed":227,"user":{"displayName":"Paweł Leszczyński","userId":"09579002163402024035"}}},"execution_count":47,"outputs":[]},{"cell_type":"code","source":["d3.violin(x=df4['labx'].values,\n","          y=df4['age'].values,\n","          tooltip=tooltip,\n","          bins=50,\n","          size=size,\n","          x_order=['acc','kich','brca', 'lgg', 'blca', 'coad', 'ov'],\n","          figsize=[None, None],\n","          filepath='violine_demo.html')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"SUEdtTzdO0RR","executionInfo":{"status":"ok","timestamp":1717319880811,"user_tz":-120,"elapsed":692,"user":{"displayName":"Paweł Leszczyński","userId":"09579002163402024035"}},"outputId":"dc23aecf-b808-4269-aad9-a24c9476ee5f"},"execution_count":49,"outputs":[{"output_type":"stream","name":"stderr","text":["[d3blocks] >INFO> Cleaning edge_properties and config parameters..\n","[d3blocks] >INFO> Initializing [Violin]\n","[d3blocks] >INFO> filepath is set to [/tmp/d3blocks/violine_demo.html]\n","[d3blocks] >INFO> Removing [564] NaN values.\n","[d3blocks] >INFO> Filter on: [acc|kich|brca|lgg|blca|coad|ov]\n","[d3blocks] >INFO> Number of samples: 1881\n","[d3blocks] >INFO> Open browser: /tmp/d3blocks/violine_demo.html\n"]}]},{"cell_type":"code","source":["d3.particles('Wizualizacja Danych', collision=0.55, spacing=3, figsize=[1200,1500])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"oVBq0Qn1PbyM","executionInfo":{"status":"ok","timestamp":1717320386060,"user_tz":-120,"elapsed":1019,"user":{"displayName":"Paweł Leszczyński","userId":"09579002163402024035"}},"outputId":"d5319e0d-1103-49a6-ec9b-d2d9f430cecf"},"execution_count":55,"outputs":[{"output_type":"stream","name":"stderr","text":["[d3blocks] >INFO> filepath is set to [/tmp/d3blocks/particles.html]\n","[d3blocks] >INFO> File already exists and will be overwritten: [/tmp/d3blocks/particles.html]\n","[d3blocks] >INFO> Open browser: /tmp/d3blocks/particles.html\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"_07aAzxGPp1d"},"execution_count":null,"outputs":[]}]}